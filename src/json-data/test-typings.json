"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\r\n\n\n/////////////////////////////\r\n/// ECMAScript APIs\r\n/////////////////////////////\r\n\r\ndeclare var NaN: number;\r\ndeclare var Infinity: number;\r\n\r\n/**\r\n * Evaluates JavaScript code and executes it.\r\n * @param x A String value that contains valid JavaScript code.\r\n */\r\ndeclare function eval(x: string): any;\r\n\r\n/**\r\n * Converts a string to an integer.\r\n * @param s A string to convert into a number.\r\n * @param radix A value between 2 and 36 that specifies the base of the number in numString.\r\n * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\r\n * All other strings are considered decimal.\r\n */\r\ndeclare function parseInt(s: string, radix?: number): number;\r\n\r\n/**\r\n * Converts a string to a floating-point number.\r\n * @param string A string that contains a floating-point number.\r\n */\r\ndeclare function parseFloat(string: string): number;\r\n\r\n/**\r\n * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\r\n * @param number A numeric value.\r\n */\r\ndeclare function isNaN(number: number): boolean;\r\n\r\n/**\r\n * Determines whether a supplied number is finite.\r\n * @param number Any numeric value.\r\n */\r\ndeclare function isFinite(number: number): boolean;\r\n\r\n/**\r\n * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\r\n * @param encodedURI A value representing an encoded URI.\r\n */\r\ndeclare function decodeURI(encodedURI: string): string;\r\n\r\n/**\r\n * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\r\n * @param encodedURIComponent A value representing an encoded URI component.\r\n */\r\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\r\n\r\n/**\r\n * Encodes a text string as a valid Uniform Resource Identifier (URI)\r\n * @param uri A value representing an encoded URI.\r\n */\r\ndeclare function encodeURI(uri: string): string;\r\n\r\n/**\r\n * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\r\n * @param uriComponent A value representing an encoded URI component.\r\n */\r\ndeclare function encodeURIComponent(uriComponent: string | number | boolean): string;\r\n\r\n/**\r\n * Computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.\r\n * @param string A string value\r\n */\r\ndeclare function escape(string: string): string;\r\n\r\n/**\r\n * Computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.\r\n * @param string A string value\r\n */\r\ndeclare function unescape(string: string): string;\r\n\r\ninterface Symbol {\r\n    /** Returns a string representation of an object. */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): symbol;\r\n}\r\n\r\ndeclare type PropertyKey = string | number | symbol;\r\n\r\ninterface PropertyDescriptor {\r\n    configurable?: boolean;\r\n    enumerable?: boolean;\r\n    value?: any;\r\n    writable?: boolean;\r\n    get?(): any;\r\n    set?(v: any): void;\r\n}\r\n\r\ninterface PropertyDescriptorMap {\r\n    [s: string]: PropertyDescriptor;\r\n}\r\n\r\ninterface Object {\r\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\r\n    constructor: Function;\r\n\r\n    /** Returns a string representation of an object. */\r\n    toString(): string;\r\n\r\n    /** Returns a date converted to a string using the current locale. */\r\n    toLocaleString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Object;\r\n\r\n    /**\r\n     * Determines whether an object has a property with the specified name.\r\n     * @param v A property name.\r\n     */\r\n    hasOwnProperty(v: PropertyKey): boolean;\r\n\r\n    /**\r\n     * Determines whether an object exists in another object's prototype chain.\r\n     * @param v Another object whose prototype chain is to be checked.\r\n     */\r\n    isPrototypeOf(v: Object): boolean;\r\n\r\n    /**\r\n     * Determines whether a specified property is enumerable.\r\n     * @param v A property name.\r\n     */\r\n    propertyIsEnumerable(v: PropertyKey): boolean;\r\n}\r\n\r\ninterface ObjectConstructor {\r\n    new(value?: any): Object;\r\n    (): any;\r\n    (value: any): any;\r\n\r\n    /** A reference to the prototype for a class of objects. */\r\n    readonly prototype: Object;\r\n\r\n    /**\r\n     * Returns the prototype of an object.\r\n     * @param o The object that references the prototype.\r\n     */\r\n    getPrototypeOf(o: any): any;\r\n\r\n    /**\r\n     * Gets the own property descriptor of the specified object.\r\n     * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.\r\n     * @param o Object that contains the property.\r\n     * @param p Name of the property.\r\n     */\r\n    getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;\r\n\r\n    /**\r\n     * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\r\n     * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\r\n     * @param o Object that contains the own properties.\r\n     */\r\n    getOwnPropertyNames(o: any): string[];\r\n\r\n    /**\r\n     * Creates an object that has the specified prototype or that has null prototype.\r\n     * @param o Object to use as a prototype. May be null.\r\n     */\r\n    create(o: object | null): any;\r\n\r\n    /**\r\n     * Creates an object that has the specified prototype, and that optionally contains specified properties.\r\n     * @param o Object to use as a prototype. May be null\r\n     * @param properties JavaScript object that contains one or more property descriptors.\r\n     */\r\n    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;\r\n\r\n    /**\r\n     * Adds a property to an object, or modifies attributes of an existing property.\r\n     * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\r\n     * @param p The property name.\r\n     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\r\n     */\r\n    defineProperty(o: any, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): any;\r\n\r\n    /**\r\n     * Adds one or more properties to an object, and/or modifies attributes of existing properties.\r\n     * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\r\n     * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\r\n     */\r\n    defineProperties(o: any, properties: PropertyDescriptorMap & ThisType<any>): any;\r\n\r\n    /**\r\n     * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\r\n     * @param o Object on which to lock the attributes.\r\n     */\r\n    seal<T>(o: T): T;\r\n\r\n    /**\r\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n     * @param o Object on which to lock the attributes.\r\n     */\r\n    freeze<T>(a: T[]): readonly T[];\r\n\r\n    /**\r\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n     * @param o Object on which to lock the attributes.\r\n     */\r\n    freeze<T extends Function>(f: T): T;\r\n\r\n    /**\r\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n     * @param o Object on which to lock the attributes.\r\n     */\r\n    freeze<T>(o: T): Readonly<T>;\r\n\r\n    /**\r\n     * Prevents the addition of new properties to an object.\r\n     * @param o Object to make non-extensible.\r\n     */\r\n    preventExtensions<T>(o: T): T;\r\n\r\n    /**\r\n     * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\r\n     * @param o Object to test.\r\n     */\r\n    isSealed(o: any): boolean;\r\n\r\n    /**\r\n     * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\r\n     * @param o Object to test.\r\n     */\r\n    isFrozen(o: any): boolean;\r\n\r\n    /**\r\n     * Returns a value that indicates whether new properties can be added to an object.\r\n     * @param o Object to test.\r\n     */\r\n    isExtensible(o: any): boolean;\r\n\r\n    /**\r\n     * Returns the names of the enumerable string properties and methods of an object.\r\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n     */\r\n    keys(o: object): string[];\r\n}\r\n\r\n/**\r\n * Provides functionality common to all JavaScript objects.\r\n */\r\ndeclare var Object: ObjectConstructor;\r\n\r\n/**\r\n * Creates a new function.\r\n */\r\ninterface Function {\r\n    /**\r\n     * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param argArray A set of arguments to be passed to the function.\r\n     */\r\n    apply(this: Function, thisArg: any, argArray?: any): any;\r\n\r\n    /**\r\n     * Calls a method of an object, substituting another object for the current object.\r\n     * @param thisArg The object to be used as the current object.\r\n     * @param argArray A list of arguments to be passed to the method.\r\n     */\r\n    call(this: Function, thisArg: any, ...argArray: any[]): any;\r\n\r\n    /**\r\n     * For a given function, creates a bound function that has the same body as the original function.\r\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n     * @param thisArg An object to which the this keyword can refer inside the new function.\r\n     * @param argArray A list of arguments to be passed to the new function.\r\n     */\r\n    bind(this: Function, thisArg: any, ...argArray: any[]): any;\r\n\r\n    /** Returns a string representation of a function. */\r\n    toString(): string;\r\n\r\n    prototype: any;\r\n    readonly length: number;\r\n\r\n    // Non-standard extensions\r\n    arguments: any;\r\n    caller: Function;\r\n}\r\n\r\ninterface FunctionConstructor {\r\n    /**\r\n     * Creates a new function.\r\n     * @param args A list of arguments the function accepts.\r\n     */\r\n    new(...args: string[]): Function;\r\n    (...args: string[]): Function;\r\n    readonly prototype: Function;\r\n}\r\n\r\ndeclare var Function: FunctionConstructor;\r\n\r\n/**\r\n * Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.\r\n */\r\ntype ThisParameterType<T> = T extends (this: unknown, ...args: any[]) => any ? unknown : T extends (this: infer U, ...args: any[]) => any ? U : unknown;\r\n\r\n/**\r\n * Removes the 'this' parameter from a function type.\r\n */\r\ntype OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;\r\n\r\ninterface CallableFunction extends Function {\r\n    /**\r\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args An array of argument values to be passed to the function.\r\n     */\r\n    apply<T, R>(this: (this: T) => R, thisArg: T): R;\r\n    apply<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R;\r\n\r\n    /**\r\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args Argument values to be passed to the function.\r\n     */\r\n    call<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A): R;\r\n\r\n    /**\r\n     * For a given function, creates a bound function that has the same body as the original function.\r\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args Arguments to bind to the parameters of the function.\r\n     */\r\n    bind<T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>;\r\n    bind<T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R;\r\n    bind<T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) => R;\r\n    bind<T, A0, A1, A2, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2): (...args: A) => R;\r\n    bind<T, A0, A1, A2, A3, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3): (...args: A) => R;\r\n    bind<T, AX, R>(this: (this: T, ...args: AX[]) => R, thisArg: T, ...args: AX[]): (...args: AX[]) => R;\r\n}\r\n\r\ninterface NewableFunction extends Function {\r\n    /**\r\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args An array of argument values to be passed to the function.\r\n     */\r\n    apply<T>(this: new () => T, thisArg: T): void;\r\n    apply<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, args: A): void;\r\n\r\n    /**\r\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args Argument values to be passed to the function.\r\n     */\r\n    call<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, ...args: A): void;\r\n\r\n    /**\r\n     * For a given function, creates a bound function that has the same body as the original function.\r\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n     * @param thisArg The object to be used as the this object.\r\n     * @param args Arguments to bind to the parameters of the function.\r\n     */\r\n    bind<T>(this: T, thisArg: any): T;\r\n    bind<A0, A extends any[], R>(this: new (arg0: A0, ...args: A) => R, thisArg: any, arg0: A0): new (...args: A) => R;\r\n    bind<A0, A1, A extends any[], R>(this: new (arg0: A0, arg1: A1, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1): new (...args: A) => R;\r\n    bind<A0, A1, A2, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2): new (...args: A) => R;\r\n    bind<A0, A1, A2, A3, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2, arg3: A3): new (...args: A) => R;\r\n    bind<AX, R>(this: new (...args: AX[]) => R, thisArg: any, ...args: AX[]): new (...args: AX[]) => R;\r\n}\r\n\r\ninterface IArguments {\r\n    [index: number]: any;\r\n    length: number;\r\n    callee: Function;\r\n}\r\n\r\ninterface String {\r\n    /** Returns a string representation of a string. */\r\n    toString(): string;\r\n\r\n    /**\r\n     * Returns the character at the specified index.\r\n     * @param pos The zero-based index of the desired character.\r\n     */\r\n    charAt(pos: number): string;\r\n\r\n    /**\r\n     * Returns the Unicode value of the character at the specified location.\r\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\r\n     */\r\n    charCodeAt(index: number): number;\r\n\r\n    /**\r\n     * Returns a string that contains the concatenation of two or more strings.\r\n     * @param strings The strings to append to the end of the string.\r\n     */\r\n    concat(...strings: string[]): string;\r\n\r\n    /**\r\n     * Returns the position of the first occurrence of a substring.\r\n     * @param searchString The substring to search for in the string\r\n     * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\r\n     */\r\n    indexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n     * Returns the last occurrence of a substring in the string.\r\n     * @param searchString The substring to search for.\r\n     * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\r\n     */\r\n    lastIndexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n     * Determines whether two strings are equivalent in the current locale.\r\n     * @param that String to compare to target string\r\n     */\r\n    localeCompare(that: string): number;\r\n\r\n    /**\r\n     * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n     * @param regexp A variable name or string literal containing the regular expression pattern and flags.\r\n     */\r\n    match(regexp: string | RegExp): RegExpMatchArray | null;\r\n\r\n    /**\r\n     * Replaces text in a string, using a regular expression or search string.\r\n     * @param searchValue A string to search for.\r\n     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\r\n     */\r\n    replace(searchValue: string | RegExp, replaceValue: string): string;\r\n\r\n    /**\r\n     * Replaces text in a string, using a regular expression or search string.\r\n     * @param searchValue A string to search for.\r\n     * @param replacer A function that returns the replacement text.\r\n     */\r\n    replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n     * Finds the first substring match in a regular expression search.\r\n     * @param regexp The regular expression pattern and applicable flags.\r\n     */\r\n    search(regexp: string | RegExp): number;\r\n\r\n    /**\r\n     * Returns a section of a string.\r\n     * @param start The index to the beginning of the specified portion of stringObj.\r\n     * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\r\n     * If this value is not specified, the substring continues to the end of stringObj.\r\n     */\r\n    slice(start?: number, end?: number): string;\r\n\r\n    /**\r\n     * Split a string into substrings using the specified separator and return them as an array.\r\n     * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\r\n     * @param limit A value used to limit the number of elements returned in the array.\r\n     */\r\n    split(separator: string | RegExp, limit?: number): string[];\r\n\r\n    /**\r\n     * Returns the substring at the specified location within a String object.\r\n     * @param start The zero-based index number indicating the beginning of the substring.\r\n     * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\r\n     * If end is omitted, the characters from start through the end of the original string are returned.\r\n     */\r\n    substring(start: number, end?: number): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to lowercase. */\r\n    toLowerCase(): string;\r\n\r\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\r\n    toLocaleLowerCase(locales?: string | string[]): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to uppercase. */\r\n    toUpperCase(): string;\r\n\r\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\r\n    toLocaleUpperCase(locales?: string | string[]): string;\r\n\r\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\r\n    trim(): string;\r\n\r\n    /** Returns the length of a String object. */\r\n    readonly length: number;\r\n\r\n    // IE extensions\r\n    /**\r\n     * Gets a substring beginning at the specified location and having the specified length.\r\n     * @param from The starting position of the desired substring. The index of the first character in the string is zero.\r\n     * @param length The number of characters to include in the returned substring.\r\n     */\r\n    substr(from: number, length?: number): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): string;\r\n\r\n    readonly [index: number]: string;\r\n}\r\n\r\ninterface StringConstructor {\r\n    new(value?: any): String;\r\n    (value?: any): string;\r\n    readonly prototype: String;\r\n    fromCharCode(...codes: number[]): string;\r\n}\r\n\r\n/**\r\n * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\r\n */\r\ndeclare var String: StringConstructor;\r\n\r\ninterface Boolean {\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): boolean;\r\n}\r\n\r\ninterface BooleanConstructor {\r\n    new(value?: any): Boolean;\r\n    <T>(value?: T): boolean;\r\n    readonly prototype: Boolean;\r\n}\r\n\r\ndeclare var Boolean: BooleanConstructor;\r\n\r\ninterface Number {\r\n    /**\r\n     * Returns a string representation of an object.\r\n     * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\r\n     */\r\n    toString(radix?: number): string;\r\n\r\n    /**\r\n     * Returns a string representing a number in fixed-point notation.\r\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n     */\r\n    toFixed(fractionDigits?: number): string;\r\n\r\n    /**\r\n     * Returns a string containing a number represented in exponential notation.\r\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n     */\r\n    toExponential(fractionDigits?: number): string;\r\n\r\n    /**\r\n     * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\r\n     * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\r\n     */\r\n    toPrecision(precision?: number): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): number;\r\n}\r\n\r\ninterface NumberConstructor {\r\n    new(value?: any): Number;\r\n    (value?: any): number;\r\n    readonly prototype: Number;\r\n\r\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\r\n    readonly MAX_VALUE: number;\r\n\r\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\r\n    readonly MIN_VALUE: number;\r\n\r\n    /**\r\n     * A value that is not a number.\r\n     * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\r\n     */\r\n    readonly NaN: number;\r\n\r\n    /**\r\n     * A value that is less than the largest negative number that can be represented in JavaScript.\r\n     * JavaScript displays NEGATIVE_INFINITY values as -infinity.\r\n     */\r\n    readonly NEGATIVE_INFINITY: number;\r\n\r\n    /**\r\n     * A value greater than the largest number that can be represented in JavaScript.\r\n     * JavaScript displays POSITIVE_INFINITY values as infinity.\r\n     */\r\n    readonly POSITIVE_INFINITY: number;\r\n}\r\n\r\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\r\ndeclare var Number: NumberConstructor;\r\n\r\ninterface TemplateStringsArray extends ReadonlyArray<string> {\r\n    readonly raw: readonly string[];\r\n}\r\n\r\n/**\r\n * The type of `import.meta`.\r\n *\r\n * If you need to declare that a given property exists on `import.meta`,\r\n * this type may be augmented via interface merging.\r\n */\r\ninterface ImportMeta {\r\n}\r\n\r\ninterface Math {\r\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\r\n    readonly E: number;\r\n    /** The natural logarithm of 10. */\r\n    readonly LN10: number;\r\n    /** The natural logarithm of 2. */\r\n    readonly LN2: number;\r\n    /** The base-2 logarithm of e. */\r\n    readonly LOG2E: number;\r\n    /** The base-10 logarithm of e. */\r\n    readonly LOG10E: number;\r\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\r\n    readonly PI: number;\r\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\r\n    readonly SQRT1_2: number;\r\n    /** The square root of 2. */\r\n    readonly SQRT2: number;\r\n    /**\r\n     * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\r\n     * For example, the absolute value of -5 is the same as the absolute value of 5.\r\n     * @param x A numeric expression for which the absolute value is needed.\r\n     */\r\n    abs(x: number): number;\r\n    /**\r\n     * Returns the arc cosine (or inverse cosine) of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    acos(x: number): number;\r\n    /**\r\n     * Returns the arcsine of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    asin(x: number): number;\r\n    /**\r\n     * Returns the arctangent of a number.\r\n     * @param x A numeric expression for which the arctangent is needed.\r\n     */\r\n    atan(x: number): number;\r\n    /**\r\n     * Returns the angle (in radians) from the X axis to a point.\r\n     * @param y A numeric expression representing the cartesian y-coordinate.\r\n     * @param x A numeric expression representing the cartesian x-coordinate.\r\n     */\r\n    atan2(y: number, x: number): number;\r\n    /**\r\n     * Returns the smallest integer greater than or equal to its numeric argument.\r\n     * @param x A numeric expression.\r\n     */\r\n    ceil(x: number): number;\r\n    /**\r\n     * Returns the cosine of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    cos(x: number): number;\r\n    /**\r\n     * Returns e (the base of natural logarithms) raised to a power.\r\n     * @param x A numeric expression representing the power of e.\r\n     */\r\n    exp(x: number): number;\r\n    /**\r\n     * Returns the greatest integer less than or equal to its numeric argument.\r\n     * @param x A numeric expression.\r\n     */\r\n    floor(x: number): number;\r\n    /**\r\n     * Returns the natural logarithm (base e) of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    log(x: number): number;\r\n    /**\r\n     * Returns the larger of a set of supplied numeric expressions.\r\n     * @param values Numeric expressions to be evaluated.\r\n     */\r\n    max(...values: number[]): number;\r\n    /**\r\n     * Returns the smaller of a set of supplied numeric expressions.\r\n     * @param values Numeric expressions to be evaluated.\r\n     */\r\n    min(...values: number[]): number;\r\n    /**\r\n     * Returns the value of a base expression taken to a specified power.\r\n     * @param x The base value of the expression.\r\n     * @param y The exponent value of the expression.\r\n     */\r\n    pow(x: number, y: number): number;\r\n    /** Returns a pseudorandom number between 0 and 1. */\r\n    random(): number;\r\n    /**\r\n     * Returns a supplied numeric expression rounded to the nearest integer.\r\n     * @param x The value to be rounded to the nearest integer.\r\n     */\r\n    round(x: number): number;\r\n    /**\r\n     * Returns the sine of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    sin(x: number): number;\r\n    /**\r\n     * Returns the square root of a number.\r\n     * @param x A numeric expression.\r\n     */\r\n    sqrt(x: number): number;\r\n    /**\r\n     * Returns the tangent of a number.\r\n     * @param x A numeric expression that contains an angle measured in radians.\r\n     */\r\n    tan(x: number): number;\r\n}\r\n/** An intrinsic object that provides basic mathematics functionality and constants. */\r\ndeclare var Math: Math;\r\n\r\n/** Enables basic storage and retrieval of dates and times. */\r\ninterface Date {\r\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\r\n    toString(): string;\r\n    /** Returns a date as a string value. */\r\n    toDateString(): string;\r\n    /** Returns a time as a string value. */\r\n    toTimeString(): string;\r\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\r\n    toLocaleString(): string;\r\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\r\n    toLocaleDateString(): string;\r\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\r\n    toLocaleTimeString(): string;\r\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\r\n    valueOf(): number;\r\n    /** Gets the time value in milliseconds. */\r\n    getTime(): number;\r\n    /** Gets the year, using local time. */\r\n    getFullYear(): number;\r\n    /** Gets the year using Universal Coordinated Time (UTC). */\r\n    getUTCFullYear(): number;\r\n    /** Gets the month, using local time. */\r\n    getMonth(): number;\r\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMonth(): number;\r\n    /** Gets the day-of-the-month, using local time. */\r\n    getDate(): number;\r\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\r\n    getUTCDate(): number;\r\n    /** Gets the day of the week, using local time. */\r\n    getDay(): number;\r\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\r\n    getUTCDay(): number;\r\n    /** Gets the hours in a date, using local time. */\r\n    getHours(): number;\r\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCHours(): number;\r\n    /** Gets the minutes of a Date object, using local time. */\r\n    getMinutes(): number;\r\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMinutes(): number;\r\n    /** Gets the seconds of a Date object, using local time. */\r\n    getSeconds(): number;\r\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCSeconds(): number;\r\n    /** Gets the milliseconds of a Date, using local time. */\r\n    getMilliseconds(): number;\r\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMilliseconds(): number;\r\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\r\n    getTimezoneOffset(): number;\r\n    /**\r\n     * Sets the date and time value in the Date object.\r\n     * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\r\n     */\r\n    setTime(time: number): number;\r\n    /**\r\n     * Sets the milliseconds value in the Date object using local time.\r\n     * @param ms A numeric value equal to the millisecond value.\r\n     */\r\n    setMilliseconds(ms: number): number;\r\n    /**\r\n     * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param ms A numeric value equal to the millisecond value.\r\n     */\r\n    setUTCMilliseconds(ms: number): number;\r\n\r\n    /**\r\n     * Sets the seconds value in the Date object using local time.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setSeconds(sec: number, ms?: number): number;\r\n    /**\r\n     * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setUTCSeconds(sec: number, ms?: number): number;\r\n    /**\r\n     * Sets the minutes value in the Date object using local time.\r\n     * @param min A numeric value equal to the minutes value.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n     * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param min A numeric value equal to the minutes value.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n     * Sets the hour value in the Date object using local time.\r\n     * @param hours A numeric value equal to the hours value.\r\n     * @param min A numeric value equal to the minutes value.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n     * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param hours A numeric value equal to the hours value.\r\n     * @param min A numeric value equal to the minutes value.\r\n     * @param sec A numeric value equal to the seconds value.\r\n     * @param ms A numeric value equal to the milliseconds value.\r\n     */\r\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n     * Sets the numeric day-of-the-month value of the Date object using local time.\r\n     * @param date A numeric value equal to the day of the month.\r\n     */\r\n    setDate(date: number): number;\r\n    /**\r\n     * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\r\n     * @param date A numeric value equal to the day of the month.\r\n     */\r\n    setUTCDate(date: number): number;\r\n    /**\r\n     * Sets the month value in the Date object using local time.\r\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n     * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\r\n     */\r\n    setMonth(month: number, date?: number): number;\r\n    /**\r\n     * Sets the month value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n     * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\r\n     */\r\n    setUTCMonth(month: number, date?: number): number;\r\n    /**\r\n     * Sets the year of the Date object using local time.\r\n     * @param year A numeric value for the year.\r\n     * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\r\n     * @param date A numeric value equal for the day of the month.\r\n     */\r\n    setFullYear(year: number, month?: number, date?: number): number;\r\n    /**\r\n     * Sets the year value in the Date object using Universal Coordinated Time (UTC).\r\n     * @param year A numeric value equal to the year.\r\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\r\n     * @param date A numeric value equal to the day of the month.\r\n     */\r\n    setUTCFullYear(year: number, month?: number, date?: number): number;\r\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\r\n    toUTCString(): string;\r\n    /** Returns a date as a string value in ISO format. */\r\n    toISOString(): string;\r\n    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\r\n    toJSON(key?: any): string;\r\n}\r\n\r\ninterface DateConstructor {\r\n    new(): Date;\r\n    new(value: number | string): Date;\r\n    new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\r\n    (): string;\r\n    readonly prototype: Date;\r\n    /**\r\n     * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\r\n     * @param s A date string\r\n     */\r\n    parse(s: string): number;\r\n    /**\r\n     * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\r\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\r\n     * @param month The month as a number between 0 and 11 (January to December).\r\n     * @param date The date as a number between 1 and 31.\r\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\r\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\r\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\r\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\r\n     */\r\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\r\n    now(): number;\r\n}\r\n\r\ndeclare var Date: DateConstructor;\r\n\r\ninterface RegExpMatchArray extends Array<string> {\r\n    index?: number;\r\n    input?: string;\r\n}\r\n\r\ninterface RegExpExecArray extends Array<string> {\r\n    index: number;\r\n    input: string;\r\n}\r\n\r\ninterface RegExp {\r\n    /**\r\n     * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\r\n     * @param string The String object or string literal on which to perform the search.\r\n     */\r\n    exec(string: string): RegExpExecArray | null;\r\n\r\n    /**\r\n     * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\r\n     * @param string String on which to perform the search.\r\n     */\r\n    test(string: string): boolean;\r\n\r\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\r\n    readonly source: string;\r\n\r\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\r\n    readonly global: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\r\n    readonly ignoreCase: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\r\n    readonly multiline: boolean;\r\n\r\n    lastIndex: number;\r\n\r\n    // Non-standard extensions\r\n    compile(): this;\r\n}\r\n\r\ninterface RegExpConstructor {\r\n    new(pattern: RegExp | string): RegExp;\r\n    new(pattern: string, flags?: string): RegExp;\r\n    (pattern: RegExp | string): RegExp;\r\n    (pattern: string, flags?: string): RegExp;\r\n    readonly prototype: RegExp;\r\n\r\n    // Non-standard extensions\r\n    $1: string;\r\n    $2: string;\r\n    $3: string;\r\n    $4: string;\r\n    $5: string;\r\n    $6: string;\r\n    $7: string;\r\n    $8: string;\r\n    $9: string;\r\n    lastMatch: string;\r\n}\r\n\r\ndeclare var RegExp: RegExpConstructor;\r\n\r\ninterface Error {\r\n    name: string;\r\n    message: string;\r\n    stack?: string;\r\n}\r\n\r\ninterface ErrorConstructor {\r\n    new(message?: string): Error;\r\n    (message?: string): Error;\r\n    readonly prototype: Error;\r\n}\r\n\r\ndeclare var Error: ErrorConstructor;\r\n\r\ninterface EvalError extends Error {\r\n}\r\n\r\ninterface EvalErrorConstructor {\r\n    new(message?: string): EvalError;\r\n    (message?: string): EvalError;\r\n    readonly prototype: EvalError;\r\n}\r\n\r\ndeclare var EvalError: EvalErrorConstructor;\r\n\r\ninterface RangeError extends Error {\r\n}\r\n\r\ninterface RangeErrorConstructor {\r\n    new(message?: string): RangeError;\r\n    (message?: string): RangeError;\r\n    readonly prototype: RangeError;\r\n}\r\n\r\ndeclare var RangeError: RangeErrorConstructor;\r\n\r\ninterface ReferenceError extends Error {\r\n}\r\n\r\ninterface ReferenceErrorConstructor {\r\n    new(message?: string): ReferenceError;\r\n    (message?: string): ReferenceError;\r\n    readonly prototype: ReferenceError;\r\n}\r\n\r\ndeclare var ReferenceError: ReferenceErrorConstructor;\r\n\r\ninterface SyntaxError extends Error {\r\n}\r\n\r\ninterface SyntaxErrorConstructor {\r\n    new(message?: string): SyntaxError;\r\n    (message?: string): SyntaxError;\r\n    readonly prototype: SyntaxError;\r\n}\r\n\r\ndeclare var SyntaxError: SyntaxErrorConstructor;\r\n\r\ninterface TypeError extends Error {\r\n}\r\n\r\ninterface TypeErrorConstructor {\r\n    new(message?: string): TypeError;\r\n    (message?: string): TypeError;\r\n    readonly prototype: TypeError;\r\n}\r\n\r\ndeclare var TypeError: TypeErrorConstructor;\r\n\r\ninterface URIError extends Error {\r\n}\r\n\r\ninterface URIErrorConstructor {\r\n    new(message?: string): URIError;\r\n    (message?: string): URIError;\r\n    readonly prototype: URIError;\r\n}\r\n\r\ndeclare var URIError: URIErrorConstructor;\r\n\r\ninterface JSON {\r\n    /**\r\n     * Converts a JavaScript Object Notation (JSON) string into an object.\r\n     * @param text A valid JSON string.\r\n     * @param reviver A function that transforms the results. This function is called for each member of the object.\r\n     * If a member contains nested objects, the nested objects are transformed before the parent object is.\r\n     */\r\n    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;\r\n    /**\r\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n     * @param value A JavaScript value, usually an object or array, to be converted.\r\n     * @param replacer A function that transforms the results.\r\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n     */\r\n    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;\r\n    /**\r\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n     * @param value A JavaScript value, usually an object or array, to be converted.\r\n     * @param replacer An array of strings and numbers that acts as a approved list for selecting the object properties that will be stringified.\r\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n     */\r\n    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;\r\n}\r\n\r\n/**\r\n * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\r\n */\r\ndeclare var JSON: JSON;\r\n\r\n\r\n/////////////////////////////\r\n/// ECMAScript Array API (specially handled by compiler)\r\n/////////////////////////////\r\n\r\ninterface ReadonlyArray<T> {\r\n    /**\r\n     * Gets the length of the array. This is a number one higher than the highest element defined in an array.\r\n     */\r\n    readonly length: number;\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.\r\n     */\r\n    toLocaleString(): string;\r\n    /**\r\n     * Combines two or more arrays.\r\n     * @param items Additional items to add to the end of array1.\r\n     */\r\n    concat(...items: ConcatArray<T>[]): T[];\r\n    /**\r\n     * Combines two or more arrays.\r\n     * @param items Additional items to add to the end of array1.\r\n     */\r\n    concat(...items: (T | ConcatArray<T>)[]): T[];\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): T[];\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n     * Returns the index of the last occurrence of a specified value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\r\n     */\r\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number, array: readonly T[]) => void, thisArg?: any): void;\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map<U>(callbackfn: (value: T, index: number, array: readonly T[]) => U, thisArg?: any): U[];\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter<S extends T>(callbackfn: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): S[];\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): T[];\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\r\n\r\n    readonly [n: number]: T;\r\n}\r\n\r\ninterface ConcatArray<T> {\r\n    readonly length: number;\r\n    readonly [n: number]: T;\r\n    join(separator?: string): string;\r\n    slice(start?: number, end?: number): T[];\r\n}\r\n\r\ninterface Array<T> {\r\n    /**\r\n     * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\r\n     */\r\n    length: number;\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n    /**\r\n     * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.\r\n     */\r\n    toLocaleString(): string;\r\n    /**\r\n     * Removes the last element from an array and returns it.\r\n     */\r\n    pop(): T | undefined;\r\n    /**\r\n     * Appends new elements to an array, and returns the new length of the array.\r\n     * @param items New elements of the Array.\r\n     */\r\n    push(...items: T[]): number;\r\n    /**\r\n     * Combines two or more arrays.\r\n     * @param items Additional items to add to the end of array1.\r\n     */\r\n    concat(...items: ConcatArray<T>[]): T[];\r\n    /**\r\n     * Combines two or more arrays.\r\n     * @param items Additional items to add to the end of array1.\r\n     */\r\n    concat(...items: (T | ConcatArray<T>)[]): T[];\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): T[];\r\n    /**\r\n     * Removes the first element from an array and returns it.\r\n     */\r\n    shift(): T | undefined;\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): T[];\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: T, b: T) => number): this;\r\n    /**\r\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n     * @param start The zero-based location in the array from which to start removing elements.\r\n     * @param deleteCount The number of elements to remove.\r\n     */\r\n    splice(start: number, deleteCount?: number): T[];\r\n    /**\r\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n     * @param start The zero-based location in the array from which to start removing elements.\r\n     * @param deleteCount The number of elements to remove.\r\n     * @param items Elements to insert into the array in place of the deleted elements.\r\n     */\r\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\r\n    /**\r\n     * Inserts new elements at the start of an array.\r\n     * @param items  Elements to insert at the start of the Array.\r\n     */\r\n    unshift(...items: T[]): number;\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n     * Returns the index of the last occurrence of a specified value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\r\n     */\r\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter<S extends T>(callbackfn: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n\r\n    [n: number]: T;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    new(arrayLength?: number): any[];\r\n    new <T>(arrayLength: number): T[];\r\n    new <T>(...items: T[]): T[];\r\n    (arrayLength?: number): any[];\r\n    <T>(arrayLength: number): T[];\r\n    <T>(...items: T[]): T[];\r\n    isArray(arg: any): arg is any[];\r\n    readonly prototype: any[];\r\n}\r\n\r\ndeclare var Array: ArrayConstructor;\r\n\r\ninterface TypedPropertyDescriptor<T> {\r\n    enumerable?: boolean;\r\n    configurable?: boolean;\r\n    writable?: boolean;\r\n    value?: T;\r\n    get?: () => T;\r\n    set?: (value: T) => void;\r\n}\r\n\r\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\r\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\r\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\r\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;\r\n\r\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\r\n\r\ninterface PromiseLike<T> {\r\n    /**\r\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\r\n     * @param onfulfilled The callback to execute when the Promise is resolved.\r\n     * @param onrejected The callback to execute when the Promise is rejected.\r\n     * @returns A Promise for the completion of which ever callback is executed.\r\n     */\r\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;\r\n}\r\n\r\n/**\r\n * Represents the completion of an asynchronous operation\r\n */\r\ninterface Promise<T> {\r\n    /**\r\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\r\n     * @param onfulfilled The callback to execute when the Promise is resolved.\r\n     * @param onrejected The callback to execute when the Promise is rejected.\r\n     * @returns A Promise for the completion of which ever callback is executed.\r\n     */\r\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;\r\n\r\n    /**\r\n     * Attaches a callback for only the rejection of the Promise.\r\n     * @param onrejected The callback to execute when the Promise is rejected.\r\n     * @returns A Promise for the completion of the callback.\r\n     */\r\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;\r\n}\r\n\r\ninterface ArrayLike<T> {\r\n    readonly length: number;\r\n    readonly [n: number]: T;\r\n}\r\n\r\n/**\r\n * Make all properties in T optional\r\n */\r\ntype Partial<T> = {\r\n    [P in keyof T]?: T[P];\r\n};\r\n\r\n/**\r\n * Make all properties in T required\r\n */\r\ntype Required<T> = {\r\n    [P in keyof T]-?: T[P];\r\n};\r\n\r\n/**\r\n * Make all properties in T readonly\r\n */\r\ntype Readonly<T> = {\r\n    readonly [P in keyof T]: T[P];\r\n};\r\n\r\n/**\r\n * From T, pick a set of properties whose keys are in the union K\r\n */\r\ntype Pick<T, K extends keyof T> = {\r\n    [P in K]: T[P];\r\n};\r\n\r\n/**\r\n * Construct a type with a set of properties K of type T\r\n */\r\ntype Record<K extends keyof any, T> = {\r\n    [P in K]: T;\r\n};\r\n\r\n/**\r\n * Exclude from T those types that are assignable to U\r\n */\r\ntype Exclude<T, U> = T extends U ? never : T;\r\n\r\n/**\r\n * Extract from T those types that are assignable to U\r\n */\r\ntype Extract<T, U> = T extends U ? T : never;\r\n\r\n/**\r\n * Construct a type with the properties of T except for those in type K.\r\n */\r\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\r\n\r\n/**\r\n * Exclude null and undefined from T\r\n */\r\ntype NonNullable<T> = T extends null | undefined ? never : T;\r\n\r\n/**\r\n * Obtain the parameters of a function type in a tuple\r\n */\r\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\r\n\r\n/**\r\n * Obtain the parameters of a constructor function type in a tuple\r\n */\r\ntype ConstructorParameters<T extends new (...args: any) => any> = T extends new (...args: infer P) => any ? P : never;\r\n\r\n/**\r\n * Obtain the return type of a function type\r\n */\r\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\r\n\r\n/**\r\n * Obtain the return type of a constructor function type\r\n */\r\ntype InstanceType<T extends new (...args: any) => any> = T extends new (...args: any) => infer R ? R : any;\r\n\r\n/**\r\n * Marker for contextual 'this' type\r\n */\r\ninterface ThisType<T> { }\r\n\r\n/**\r\n * Represents a raw buffer of binary data, which is used to store data for the\r\n * different typed arrays. ArrayBuffers cannot be read from or written to directly,\r\n * but can be passed to a typed array or DataView Object to interpret the raw\r\n * buffer as needed.\r\n */\r\ninterface ArrayBuffer {\r\n    /**\r\n     * Read-only. The length of the ArrayBuffer (in bytes).\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * Returns a section of an ArrayBuffer.\r\n     */\r\n    slice(begin: number, end?: number): ArrayBuffer;\r\n}\r\n\r\n/**\r\n * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.\r\n */\r\ninterface ArrayBufferTypes {\r\n    ArrayBuffer: ArrayBuffer;\r\n}\r\ntype ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];\r\n\r\ninterface ArrayBufferConstructor {\r\n    readonly prototype: ArrayBuffer;\r\n    new(byteLength: number): ArrayBuffer;\r\n    isView(arg: any): arg is ArrayBufferView;\r\n}\r\ndeclare var ArrayBuffer: ArrayBufferConstructor;\r\n\r\ninterface ArrayBufferView {\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    byteOffset: number;\r\n}\r\n\r\ninterface DataView {\r\n    readonly buffer: ArrayBuffer;\r\n    readonly byteLength: number;\r\n    readonly byteOffset: number;\r\n    /**\r\n     * Gets the Float32 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Gets the Float64 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Gets the Int8 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getInt8(byteOffset: number): number;\r\n\r\n    /**\r\n     * Gets the Int16 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\r\n    /**\r\n     * Gets the Int32 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Gets the Uint8 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getUint8(byteOffset: number): number;\r\n\r\n    /**\r\n     * Gets the Uint16 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Gets the Uint32 value at the specified byte offset from the start of the view. There is\r\n     * no alignment constraint; multi-byte values may be fetched from any offset.\r\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n     */\r\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n     * Stores an Float32 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Float64 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Int8 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     */\r\n    setInt8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n     * Stores an Int16 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Int32 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Uint8 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     */\r\n    setUint8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n     * Stores an Uint16 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n     * Stores an Uint32 value at the specified byte offset from the start of the view.\r\n     * @param byteOffset The place in the buffer at which the value should be set.\r\n     * @param value The value to set.\r\n     * @param littleEndian If false or undefined, a big-endian value should be written,\r\n     * otherwise a little-endian value should be written.\r\n     */\r\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n}\r\n\r\ninterface DataViewConstructor {\r\n    new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;\r\n}\r\ndeclare var DataView: DataViewConstructor;\r\n\r\n/**\r\n * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\r\n * number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Int8Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Int8Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Int8Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Int8Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\ninterface Int8ArrayConstructor {\r\n    readonly prototype: Int8Array;\r\n    new(length: number): Int8Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int8Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int8Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Int8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Int8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array;\r\n\r\n\r\n}\r\ndeclare var Int8Array: Int8ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Uint8Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Uint8Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint8ArrayConstructor {\r\n    readonly prototype: Uint8Array;\r\n    new(length: number): Uint8Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Uint8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Uint8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;\r\n\r\n}\r\ndeclare var Uint8Array: Uint8ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\r\n * If the requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Uint8ClampedArray {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint8ClampedArrayConstructor {\r\n    readonly prototype: Uint8ClampedArray;\r\n    new(length: number): Uint8ClampedArray;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8ClampedArray;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8ClampedArray;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Uint8ClampedArray;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray;\r\n}\r\ndeclare var Uint8ClampedArray: Uint8ClampedArrayConstructor;\r\n\r\n/**\r\n * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Int16Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Int16Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Int16Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Int16Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Int16ArrayConstructor {\r\n    readonly prototype: Int16Array;\r\n    new(length: number): Int16Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int16Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int16Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Int16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Int16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array;\r\n\r\n\r\n}\r\ndeclare var Int16Array: Int16ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Uint16Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Uint16Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint16ArrayConstructor {\r\n    readonly prototype: Uint16Array;\r\n    new(length: number): Uint16Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint16Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint16Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Uint16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Uint16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array;\r\n\r\n\r\n}\r\ndeclare var Uint16Array: Uint16ArrayConstructor;\r\n/**\r\n * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Int32Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Int32Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Int32Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Int32Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Int32ArrayConstructor {\r\n    readonly prototype: Int32Array;\r\n    new(length: number): Int32Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int32Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int32Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Int32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Int32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array;\r\n\r\n}\r\ndeclare var Int32Array: Int32ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\r\n * requested number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Uint32Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Uint32Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint32ArrayConstructor {\r\n    readonly prototype: Uint32Array;\r\n    new(length: number): Uint32Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint32Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint32Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Uint32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Uint32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array;\r\n\r\n}\r\ndeclare var Uint32Array: Uint32ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\r\n * of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Float32Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Float32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Float32Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Float32Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Float32Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Float32Array;\r\n\r\n    /**\r\n     * Converts a number to a string by using the current locale.\r\n     */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n     * Returns a string representation of an array.\r\n     */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Float32ArrayConstructor {\r\n    readonly prototype: Float32Array;\r\n    new(length: number): Float32Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float32Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float32Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Float32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Float32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array;\r\n\r\n\r\n}\r\ndeclare var Float32Array: Float32ArrayConstructor;\r\n\r\n/**\r\n * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\r\n * number of bytes could not be allocated an exception is raised.\r\n */\r\ninterface Float64Array {\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * The ArrayBuffer instance referenced by the array.\r\n     */\r\n    readonly buffer: ArrayBufferLike;\r\n\r\n    /**\r\n     * The length in bytes of the array.\r\n     */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n     * The offset in bytes of the array.\r\n     */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n     * Returns the this object after copying a section of the array identified by start and end\r\n     * to the same array starting at position target\r\n     * @param target If target is negative, it is treated as length+target where length is the\r\n     * length of the array.\r\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n     * is treated as length+end.\r\n     * @param end If not specified, length of the this object is used as its default value.\r\n     */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n     * Determines whether all the members of an array satisfy the specified test.\r\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value false, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    every(callbackfn: (value: number, index: number, array: Float64Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Returns the this object after filling the section identified by start and end with value\r\n     * @param value value to fill array section with\r\n     * @param start index to start filling the array at. If start is negative, it is treated as\r\n     * length+start where length is the length of the array.\r\n     * @param end index to stop filling the array at. If end is negative, it is treated as\r\n     * length+end.\r\n     */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n     * Returns the elements of an array that meet the condition specified in a callback function.\r\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    filter(callbackfn: (value: number, index: number, array: Float64Array) => any, thisArg?: any): Float64Array;\r\n\r\n    /**\r\n     * Returns the value of the first element in the array where predicate is true, and undefined\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found, find\r\n     * immediately returns that element value. Otherwise, find returns undefined.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    find(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the array where predicate is true, and -1\r\n     * otherwise.\r\n     * @param predicate find calls predicate once for each element of the array, in ascending\r\n     * order, until it finds one where predicate returns true. If such an element is found,\r\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n     * @param thisArg If provided, it will be used as the this value for each invocation of\r\n     * predicate. If it is not provided, undefined is used instead.\r\n     */\r\n    findIndex(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n     * Performs the specified action for each element in an array.\r\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     *  search starts at index 0.\r\n     */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Adds all the elements of an array separated by the specified separator string.\r\n     * @param separator A string used to separate one element of an array from the next in the\r\n     * resulting String. If omitted, the array elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n     * Returns the index of the last occurrence of a value in an array.\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n     * search starts at index 0.\r\n     */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n     * The length of the array.\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array, and returns an array that\r\n     * contains the results.\r\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array. The return value of\r\n     * the callback function is the accumulated result, and is provided as an argument in the next\r\n     * call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n     * callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an\r\n     * argument instead of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\r\n\r\n    /**\r\n     * Calls the specified callback function for all the elements in an array, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n     * the callbackfn function one time for each element in the array.\r\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n     * instead of an array value.\r\n     */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Reverses the elements in an Array.\r\n     */\r\n    reverse(): Float64Array;\r\n\r\n    /**\r\n     * Sets a value or an array of values.\r\n     * @param array A typed or untyped array of values to set.\r\n     * @param offset The index in the current array at which the values are to be written.\r\n     */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n     * Returns a section of an array.\r\n     * @param start The beginning of the specified portion of the array.\r\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\n     */\r\n    slice(start?: number, end?: number): Float64Array;\r\n\r\n    /**\r\n     * Determines whether the specified callback function returns true for any element of an array.\r\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\r\n     * the callbackfn function for each element in the array until the callbackfn returns a value\r\n     * which is coercible to the Boolean value true, or until the end of the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n     * If thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    some(callbackfn: (value: number, index: number, array: Float64Array) => unknown, thisArg?: any): boolean;\r\n\r\n    /**\r\n     * Sorts an array.\r\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\r\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\r\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n     * ```ts\r\n     * [11,2,22,1].sort((a, b) => a - b)\r\n     * ```\r\n     */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n     * at begin, inclusive, up to end, exclusive.\r\n     * @param begin The index of the beginning of the array.\r\n     * @param end The index of the end of the array.\r\n     */\r\n    subarray(begin?: number, end?: number): Float64Array;\r\n\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Float64ArrayConstructor {\r\n    readonly prototype: Float64Array;\r\n    new(length: number): Float64Array;\r\n    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float64Array;\r\n    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float64Array;\r\n\r\n    /**\r\n     * The size in bytes of each element in the array.\r\n     */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n     * Returns a new array from a set of elements.\r\n     * @param items A set of elements to include in the new array object.\r\n     */\r\n    of(...items: number[]): Float64Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     */\r\n    from(arrayLike: ArrayLike<number>): Float64Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array;\r\n\r\n}\r\ndeclare var Float64Array: Float64ArrayConstructor;\r\n\r\n/////////////////////////////\r\n/// ECMAScript Internationalization API\r\n/////////////////////////////\r\n\r\ndeclare namespace Intl {\r\n    interface CollatorOptions {\r\n        usage?: string;\r\n        localeMatcher?: string;\r\n        numeric?: boolean;\r\n        caseFirst?: string;\r\n        sensitivity?: string;\r\n        ignorePunctuation?: boolean;\r\n    }\r\n\r\n    interface ResolvedCollatorOptions {\r\n        locale: string;\r\n        usage: string;\r\n        sensitivity: string;\r\n        ignorePunctuation: boolean;\r\n        collation: string;\r\n        caseFirst: string;\r\n        numeric: boolean;\r\n    }\r\n\r\n    interface Collator {\r\n        compare(x: string, y: string): number;\r\n        resolvedOptions(): ResolvedCollatorOptions;\r\n    }\r\n    var Collator: {\r\n        new(locales?: string | string[], options?: CollatorOptions): Collator;\r\n        (locales?: string | string[], options?: CollatorOptions): Collator;\r\n        supportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];\r\n    };\r\n\r\n    interface NumberFormatOptions {\r\n        localeMatcher?: string;\r\n        style?: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        useGrouping?: boolean;\r\n        minimumIntegerDigits?: number;\r\n        minimumFractionDigits?: number;\r\n        maximumFractionDigits?: number;\r\n        minimumSignificantDigits?: number;\r\n        maximumSignificantDigits?: number;\r\n    }\r\n\r\n    interface ResolvedNumberFormatOptions {\r\n        locale: string;\r\n        numberingSystem: string;\r\n        style: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        minimumIntegerDigits: number;\r\n        minimumFractionDigits: number;\r\n        maximumFractionDigits: number;\r\n        minimumSignificantDigits?: number;\r\n        maximumSignificantDigits?: number;\r\n        useGrouping: boolean;\r\n    }\r\n\r\n    interface NumberFormat {\r\n        format(value: number): string;\r\n        resolvedOptions(): ResolvedNumberFormatOptions;\r\n    }\r\n    var NumberFormat: {\r\n        new(locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\r\n        (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\r\n        supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];\r\n    };\r\n\r\n    interface DateTimeFormatOptions {\r\n        localeMatcher?: string;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n        formatMatcher?: string;\r\n        hour12?: boolean;\r\n        timeZone?: string;\r\n    }\r\n\r\n    interface ResolvedDateTimeFormatOptions {\r\n        locale: string;\r\n        calendar: string;\r\n        numberingSystem: string;\r\n        timeZone: string;\r\n        hour12?: boolean;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n    }\r\n\r\n    interface DateTimeFormat {\r\n        format(date?: Date | number): string;\r\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\r\n    }\r\n    var DateTimeFormat: {\r\n        new(locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\r\n        (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\r\n        supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];\r\n    };\r\n}\r\n\r\ninterface String {\r\n    /**\r\n     * Determines whether two strings are equivalent in the current or specified locale.\r\n     * @param that String to compare to target string\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\r\n     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\r\n     */\r\n    localeCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;\r\n}\r\n\r\ninterface Number {\r\n    /**\r\n     * Converts a number to a string by using the current or specified locale.\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n     * @param options An object that contains one or more properties that specify comparison options.\r\n     */\r\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\r\n}\r\n\r\ninterface Date {\r\n    /**\r\n     * Converts a date and time to a string by using the current or specified locale.\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n     * @param options An object that contains one or more properties that specify comparison options.\r\n     */\r\n    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\r\n    /**\r\n     * Converts a date to a string by using the current or specified locale.\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n     * @param options An object that contains one or more properties that specify comparison options.\r\n     */\r\n    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\r\n\r\n    /**\r\n     * Converts a time to a string by using the current or specified locale.\r\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n     * @param options An object that contains one or more properties that specify comparison options.\r\n     */\r\n    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\r\n}\r\n\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\r\n\n\n/// <reference lib=\"es2015\" />\r\n/// <reference lib=\"dom\" />\r\n/// <reference lib=\"dom.iterable\" />\r\n/// <reference lib=\"webworker.importscripts\" />\r\n/// <reference lib=\"scripthost\" />\r\n\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\r\n\n\n/// <reference lib=\"es5\" />\r\n/// <reference lib=\"es2015.core\" />\r\n/// <reference lib=\"es2015.collection\" />\r\n/// <reference lib=\"es2015.generator\" />\r\n/// <reference lib=\"es2015.promise\" />\r\n/// <reference lib=\"es2015.iterable\" />\r\n/// <reference lib=\"es2015.proxy\" />\r\n/// <reference lib=\"es2015.reflect\" />\r\n/// <reference lib=\"es2015.symbol\" />\r\n/// <reference lib=\"es2015.symbol.wellknown\" />\r\n\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\r\n\n\ninterface Map<K, V> {\r\n    clear(): void;\r\n    delete(key: K): boolean;\r\n    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;\r\n    get(key: K): V | undefined;\r\n    has(key: K): boolean;\r\n    set(key: K, value: V): this;\r\n    readonly size: number;\r\n}\r\n\r\ninterface MapConstructor {\r\n    new(): Map<any, any>;\r\n    new<K, V>(entries?: readonly (readonly [K, V])[] | null): Map<K, V>;\r\n    readonly prototype: Map<any, any>;\r\n}\r\ndeclare var Map: MapConstructor;\r\n\r\ninterface ReadonlyMap<K, V> {\r\n    forEach(callbackfn: (value: V, key: K, map: ReadonlyMap<K, V>) => void, thisArg?: any): void;\r\n    get(key: K): V | undefined;\r\n    has(key: K): boolean;\r\n    readonly size: number;\r\n}\r\n\r\ninterface WeakMap<K extends object, V> {\r\n    delete(key: K): boolean;\r\n    get(key: K): V | undefined;\r\n    has(key: K): boolean;\r\n    set(key: K, value: V): this;\r\n}\r\n\r\ninterface WeakMapConstructor {\r\n    new <K extends object = object, V = any>(entries?: readonly [K, V][] | null): WeakMap<K, V>;\r\n    readonly prototype: WeakMap<object, any>;\r\n}\r\ndeclare var WeakMap: WeakMapConstructor;\r\n\r\ninterface Set<T> {\r\n    add(value: T): this;\r\n    clear(): void;\r\n    delete(value: T): boolean;\r\n    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\r\n    has(value: T): boolean;\r\n    readonly size: number;\r\n}\r\n\r\ninterface SetConstructor {\r\n    new <T = any>(values?: readonly T[] | null): Set<T>;\r\n    readonly prototype: Set<any>;\r\n}\r\ndeclare var Set: SetConstructor;\r\n\r\ninterface ReadonlySet<T> {\r\n    forEach(callbackfn: (value: T, value2: T, set: ReadonlySet<T>) => void, thisArg?: any): void;\r\n    has(value: T): boolean;\r\n    readonly size: number;\r\n}\r\n\r\ninterface WeakSet<T extends object> {\r\n    add(value: T): this;\r\n    delete(value: T): boolean;\r\n    has(value: T): boolean;\r\n}\r\n\r\ninterface WeakSetConstructor {\r\n    new <T extends object = object>(values?: readonly T[] | null): WeakSet<T>;\r\n    readonly prototype: WeakSet<object>;\r\n}\r\ndeclare var WeakSet: WeakSetConstructor;\r\n\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\r\n\n\ninterface PromiseConstructor {\r\n    /**\r\n     * A reference to the prototype.\r\n     */\r\n    readonly prototype: Promise<any>;\r\n\r\n    /**\r\n     * Creates a new Promise.\r\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\r\n     * a resolve callback used to resolve the promise with a value or the result of another promise,\r\n     * and a reject callback used to reject the promise with a provided reason or error.\r\n     */\r\n    new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>, T10 | PromiseLike<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6, T7, T8>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6, T7>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>]): Promise<[T1, T2, T3, T4, T5]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>]): Promise<[T1, T2, T3, T4]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]): Promise<[T1, T2, T3]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): Promise<[T1, T2]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T>(values: readonly (T | PromiseLike<T>)[]): Promise<T[]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n     * or rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    race<T>(values: readonly T[]): Promise<T extends PromiseLike<infer U> ? U : T>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n     * or rejected.\r\n     * @param values An iterable of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    race<T>(values: Iterable<T>): Promise<T extends PromiseLike<infer U> ? U : T>;\r\n\r\n    /**\r\n     * Creates a new rejected promise for the provided reason.\r\n     * @param reason The reason the promise was rejected.\r\n     * @returns A new rejected Promise.\r\n     */\r\n    reject<T = never>(reason?: any): Promise<T>;\r\n\r\n    /**\r\n     * Creates a new resolved promise for the provided value.\r\n     * @param value A promise.\r\n     * @returns A promise whose internal state matches the provided promise.\r\n     */\r\n    resolve<T>(value: T | PromiseLike<T>): Promise<T>;\r\n\r\n    /**\r\n     * Creates a new resolved promise .\r\n     * @returns A resolved promise.\r\n     */\r\n    resolve(): Promise<void>;\r\n}\r\n\r\ndeclare var Promise: PromiseConstructor;\r\n\n//import {\n    IAliasParams,\n    IAliasTransaction,\n    IBurnParams,\n    IBurnTransaction,\n    ICancelLeaseParams,\n    ICancelLeaseTransaction,\n    ICancelOrder,\n    ICancelOrderParams,\n    IDataParams,\n    IDataTransaction,\n    IInvokeScriptParams,\n    IInvokeScriptTransaction,\n    IIssueParams,\n    IIssueTransaction,\n    ILeaseParams,\n    ILeaseTransaction,\n    IMassTransferItem,\n    IMassTransferParams,\n    IMassTransferTransaction,\n    IOrderParams,\n    IReissueParams,\n    IReissueTransaction,\n    ISetAssetScriptParams,\n    ISetAssetScriptTransaction,\n    ISetScriptParams,\n    ISetScriptTransaction,\n    ISponsorshipParams,\n    ISponsorshipTransaction,\n    ITransferParams,\n    ITransferTransaction,\n    TOrder,\n    TSeedTypes,\n    TTx,\n    TTxParams,\n    WithId,\n    WithTxType,\n    INodeRequestOptions,\n    TDataEntry, ITransaction, IUpdateAssetInfoParams, IUpdateAssetInfoTransaction\n} from '@waves/waves-transactions';\n\n///splice-start\n {\n\n     const env: {\n        API_BASE: string,\n        SEED: string,\n        CHAIN_ID: string,\n    }\n   ///splice-end\n    /**\n     * Contains seeds generated by setupAccounts function\n     * E.g:\n     * ```ts\n     * await setupAccounts({foo:10, bar: 20})\n     * console.log(accounts.foo, accounts.bar) // these variables now contain seeds from accounts with 10 and 20 wavelets\n     * ```\n     */\n     const accounts: Record<string, string>;\n\n\n/// TRANSACTION CREATORS\n    /**\n     * Creates alias transaction or signs already formed one. Creates alias for address.\n     * Alias could be used in place of address later\n     */\n     function alias(params: IAliasParams, seed?: TSeedTypes): IAliasTransaction & WithId\n\n    /**\n     * Creates burn transaction or signs already formed one. Burn transaction destroys tokens. You cannot burn WAVES\n     */\n     function burn(params: IBurnParams, seed?: TSeedTypes): IBurnTransaction & WithId\n\n    /**\n     * Creates cancel-lease transaction or signs already formed one\n     */\n     function cancelLease(params: ICancelLeaseParams, seed?: TSeedTypes): ICancelLeaseTransaction & WithId\n\n    /**\n     * Creates cancel-order request or signs already formed one\n     */\n     function cancelOrder(params: ICancelOrderParams, seed?: TSeedTypes): ICancelOrder\n\n    /**\n     * Creates data transaction or signs already formed one\n     */\n     function data(params: IDataParams, seed?: TSeedTypes): IDataTransaction & WithId\n\n    /**\n     * Creates issue transaction or signs already formed one\n     */\n     function issue(params: IIssueParams, seed?: TSeedTypes): IIssueTransaction & WithId\n\n    /**\n     * Creates reissue transaction or signs already formed one\n     */\n     function reissue(params: IReissueParams, seed?: TSeedTypes): IReissueTransaction & WithId\n\n    /**\n     * Creates lease transaction or signs already formed one\n     */\n     function lease(params: ILeaseParams, seed?: TSeedTypes): ILeaseTransaction & WithId\n\n    /**\n     * Creates mass-transfer transaction or signs already formed one\n     */\n     function massTransfer(params: IMassTransferParams, seed?: TSeedTypes): IMassTransferTransaction & WithId\n\n    /**\n     * Creates order or signs already formed one\n     */\n     function order(params: IOrderParams, seed?: TSeedTypes): TOrder & WithId\n\n    /**\n     * Creates transfer transaction or signs already formed one\n     */\n     function transfer(params: ITransferParams, seed?: TSeedTypes): ITransferTransaction & WithId\n\n    /**\n     * Creates set-script transaction or signs already formed one\n     */\n     function setScript(params: ISetScriptParams, seed?: TSeedTypes): ISetScriptTransaction & WithId\n\n    /**\n     * Creates set-asset-script transaction or signs already formed one\n     */\n     function setAssetScript(params: ISetAssetScriptParams, seed?: TSeedTypes): ISetAssetScriptTransaction & WithId\n\n    /**\n     * Creates invoke-script transaction or signs already formed one\n     */\n     function invokeScript(params: IInvokeScriptParams, seed?: TSeedTypes): IInvokeScriptTransaction & WithId\n\n    /**\n     * Creates sponsorship transaction or signs already formed one\n     */\n     function sponsorship(params: ISponsorshipParams, seed?: TSeedTypes): ISponsorshipTransaction & WithId\n\n    /**\n     * Creates updateAssetInfo transaction or signs already formed one\n     */\n     function updateAssetInfo(params: IUpdateAssetInfoParams, seed?: TSeedTypes): IUpdateAssetInfoTransaction & WithId\n\n\n    /**\n     * Signs arbitrary transaction\n     */\n     function signTx(params: TTx | (TTxParams & WithTxType), seed?: TSeedTypes): TTx\n\n\n/// NODE INTERACTION\n    /**\n     * Resolves when specified txId is mined into the block\n     * By default has 20s timeout and uses current environment node\n     *\n     * ### Usage\n     * ```ts\n     * const tx = .....\n     * await broadcast(tx)\n     * await waitForTx(tx.id)\n     * ```\n     */\n     function waitForTx(txId: string, options?: INodeRequestOptions): Promise<TTx & {applicationStatus?: 'succeed' | 'scriptExecutionFailed'}>\n\n    /**\n     * Resolves N blocks after specified txId is mined into the block\n     * By default has 20s timeout and uses current environment node\n     */\n     function waitForTxWithNConfirmations(txId: string, confirmations: number, options?: INodeRequestOptions): Promise<TTx & {applicationStatus?: 'succeed' | 'scriptExecutionFailed'}>\n\n    /**\n     * Resolves N blocks after current blockchain height\n     * By default has 20s timeout and uses current environment node\n     */\n     function waitNBlocks(blocksCount: number, options?: INodeRequestOptions): Promise<void>\n\n    /**\n     * Current blockchain height\n     * By default has 20s timeout and uses current environment node\n     */\n     function currentHeight(apiBase?: string): Promise<number>\n\n    /**\n     * Resolves after target height has been reached\n     * By default has 20s timeout and uses current environment node\n     */\n     function waitForHeight(target: number, options?: INodeRequestOptions): Promise<void>\n\n    /**\n     * Get transaction by Id. Returns null if no transaction with such id present in blockchain\n     */\n     function transactionById(txId: string, apiBase?: string): Promise<ITransaction & WithId & {\n        height: number;\n    }>;\n\n    /**\n     * Get account effective balance\n     * By default uses current environment address and node\n     */\n     function balance(address?: string, apiBase?: string): Promise<number>\n\n    /**\n     * Retrieve information about specific asset account balance\n     * By default uses current environment address and node\n     */\n     function assetBalance(assetId: string, address?: string, apiBase?: string): Promise<any>\n\n    /**\n     * Retrieve full information about waves account balance. Effective, generating etc\n     * By default uses current environment address and node\n     */\n     function balanceDetails(address?: string, apiBase?: string): Promise<any>\n\n    /**\n     * Get full account dictionary\n     * By default uses current environment address and node\n     */\n     function accountData(address?: string, apiBase?: string): Promise<Record<string, TDataEntry>>\n\n    /**\n     * Get data from account dictionary by key\n     * By default uses current environment address and node\n     */\n     function accountDataByKey(key: string, address?: string, apiBase?: string): Promise<TDataEntry>\n\n    /**\n     * Get invokeScript tx state changes\n     * By default uses current environment address and node\n     */\n     function stateChanges(invokeScriptTxId: string, apiBase?: string): Promise<any>\n\n    /**\n     * Sends transaction to waves node\n     * By default uses current environment address and node\n     */\n     function broadcast(tx: TTx, apiBase?: string): Promise<any>\n\n\n// UTILITY\n    /**\n     * Returns file content as string. Either from 'ride' folder or WEB IDE storage\n     */\n     function file(name?: string): string\n\n    /**\n     * Shorthand for file()\n     */\n     function contract(): Promise<string>\n\n    /**\n     * Generates key pair from seed\n     * By default uses current environment seed\n     */\n     function keyPair(seed?: string): { publicKey: string, privateKey: string }\n\n    /**\n     * Generates public key from seed\n     * By default uses current environment seed\n     */\n     function publicKey(seed?: string): string\n\n    /**\n     * Generates private key from seed\n     * By default uses current environment seed\n     */\n     function privateKey(seed?: string): string\n\n    /**\n     * Generates address\n     * By default uses current environment seed and chainId\n     */\n     function address(seed?: string, chainId?: string): string\n\n    /**\n     * Returns base64 representations of compiled ride file\n     */\n     function compile(code: string): string\n\n    /**\n     * Signs arbitrary bytes\n     * By default uses current environment seed and chainId\n     */\n     function signBytes(bytes: Uint8Array, seed?: string): string\n\n\n     interface ISetupAccountsOptions {\n        /**\n         * Generated accounts have seed like 'name#' + nonce. E.g.: foo#ff4682. By default nonce is chosen randomly\n         * you can set nonce to have consistent seeds between tests\n         */\n        nonce?: string,\n        /**\n         * Seed phrase for account, from which waves will be transferred to generated accounts.\n         * If not set current account will be used\n         */\n        masterSeed?: string,\n    }\n\n     interface IPayment {\n        assetId?: string | null\n        amount: number\n    }\n\n     interface IPayment {\n        assetId?: string | null\n        amount: number\n    }\n\n    interface IInvokeArgument {\n        /**\n         * possible values:   \"string\" | \"number\" | \"binary\" | \"boolean\"\n         */\n        type: string,\n        value: string | number | boolean\n    }\n\n     interface IInvokeOptions {\n        dApp: string\n        functionName: string\n        arguments?: (number | string | boolean | Uint8Array | number[] | IInvokeArgument)[]\n        payment?: IPayment | IPayment[] | number\n    }\n\n    /**\n     * Creates invoke tx and broadcasts it\n     * */\n     function invoke(options: IInvokeOptions, seed?: string, apiBase?: string): Promise<any>;\n\n    /**\n     * Generates test accounts with balances. Sends waves to generated accounts from master seed. Saves account seeds `accounts`\n     * E.g.: setupAccounts({foo:1000}). Now accounts['foo'] contains seed phrase for account and this account has\n     * 1000 wavelets\n     * By default uses current environment node and seed as masterSeed\n     *\n     * ### Usage\n     * ```ts\n     * const wvs = 10 ** 8\n     * describe('some suite', () => {\n     *     before(async ()) => {\n     *         await setupAccounts({foo: 1 * wvs, bar: 2 * wvs})\n     *     })\n     *\n     *     it('logs balances', async () => {\n     *         console.log(await balance(address(accounts.foo)))\n     *         console.log(await balance(address(accounts.bar)))\n     *     })\n     * })\n     * ```\n     */\n     function setupAccounts(balances: Record<string, number>, options?: ISetupAccountsOptions): Promise<Record<string, string>>\n\n    /**\n     * Shorthand for `chai.//` [[chai]]\n     */\n     function //(target: any, message?: string): any\n\n    /**\n     * Waves-crypto library https://www.npmjs.com/package/@waves/waves-crypto\n     * Available in global scope:\n     * ```js\n     * const addressBytes = crypto.base58Decode('3N77yhDrPTdLFjzNPZcBQPZLDg11EHAB7xF')\n     * ```\n     */\n     module wavesCrypto {\n\n    }\n\n\n    /**\n     * Chai assertion library https://www.chaijs.com/\n     * with chaiAsPromised plugin https://www.chaijs.com/plugins/chai-as-promised/\n     *  * Available in global scope:\n     * ```js\n     * chai.//(2 === 3).to.be.false\n     * ```\n     * You can always use shorthand for [[//]]\n     */\n     module chai {\n\n    }\n}\n\n declare const TRANSACTION_TYPE: {\n    ISSUE: 3;\n    TRANSFER: 4;\n    REISSUE: 5;\n    BURN: 6;\n    EXCHANGE: 7;\n    LEASE: 8;\n    CANCEL_LEASE: 9;\n    ALIAS: 10;\n    MASS_TRANSFER: 11;\n    DATA: 12;\n    SET_SCRIPT: 13;\n    SPONSORSHIP: 14;\n    SET_ASSET_SCRIPT: 15;\n    INVOKE_SCRIPT: 16;\n    UPDATE_ASSET_INFO: 17;\n};\n declare const DATA_FIELD_TYPE: {\n    INTEGER: \"integer\";\n    BOOLEAN: \"boolean\";\n    BINARY: \"binary\";\n    STRING: \"string\";\n};\n declare type TDataEntry = TTypedData & {\n    key: string;\n};\n declare type TTypedData = IBooleanData | IIntegerData | IStringData | IBinaryData;\n declare type TDeleteRequest = {\n    type?: null;\n    value?: null;\n    key: string;\n};\n interface IBooleanData {\n    type: typeof DATA_FIELD_TYPE.BOOLEAN;\n    value: boolean;\n}\n interface IIntegerData<LONG = string | number> {\n    type: typeof DATA_FIELD_TYPE.INTEGER;\n    value: LONG;\n}\n interface IStringData {\n    type: typeof DATA_FIELD_TYPE.STRING;\n    value: string;\n}\n interface IBinaryData {\n    type: typeof DATA_FIELD_TYPE.BINARY;\n    value: string;\n}\n interface ITypelessDataEntry {\n    key: string;\n    value: string | number | boolean | Uint8Array | number[];\n}\n declare type TTransactionType = typeof TRANSACTION_TYPE[keyof typeof TRANSACTION_TYPE];\n declare type TDataFiledType = typeof DATA_FIELD_TYPE[keyof typeof DATA_FIELD_TYPE];\n interface WithSender {\n    /**\n     * Account public key. This account will pay fee and this account's script will be executed if exists\n     */\n    senderPublicKey: string;\n}\n interface WithProofs {\n    /**\n     * ITransaction signatures\n     * @minItems 0\n     * @maxItems 8\n     */\n    proofs: string[];\n}\n interface WithChainId {\n    /**\n     * Network byte.\n     * E.g.,\n     * 87 is used for Waves mainnet, 84 for Waves testnet\n     */\n    chainId: number;\n}\n interface WithId {\n    /**\n     * Transaction ID. 32 bytes hash encoded as base58 string\n     */\n    id: string;\n}\n interface WithTxType {\n    type: TTransactionType;\n}\n/**\n * This interface has common fields for all transactions\n * @typeparam LONG Generic type representing LONG type. Default to string | number\n */\n interface ITransaction<LONG = string | number> extends WithProofs, WithSender {\n    type: number;\n    timestamp: number;\n    fee: LONG;\n    version: number;\n    chainId: number;\n    feeAssetId?: string | null;\n}\n/**\n *\n */\n declare type TTx<LONG = string | number> = IAliasTransaction<LONG> | IIssueTransaction<LONG> | ITransferTransaction<LONG> | IReissueTransaction<LONG> | IBurnTransaction<LONG> | ILeaseTransaction<LONG> | IExchangeTransaction<LONG> | ICancelLeaseTransaction<LONG> | IMassTransferTransaction<LONG> | ISetScriptTransaction<LONG> | ISponsorshipTransaction<LONG> | IDataTransaction<LONG> | ISetAssetScriptTransaction<LONG> | IInvokeScriptTransaction<LONG> | IUpdateAssetInfoTransaction<LONG>;\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IIssueTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: typeof TRANSACTION_TYPE.ISSUE;\n    /**\n     * @minLength 4\n     * @maxLength 16\n     */\n    name: string;\n    /**\n     * @maxLength 1000\n     */\n    description: string;\n    decimals: number;\n    quantity: LONG;\n    reissuable: boolean;\n    script?: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISetScriptTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: typeof TRANSACTION_TYPE.SET_SCRIPT;\n    /**\n     * Compiled script encoded as base64 string\n     */\n    script: string | null;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISetAssetScriptTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: typeof TRANSACTION_TYPE.SET_ASSET_SCRIPT;\n    assetId: string;\n    /**\n     * Compiled script encoded as base64 string\n     */\n    script: string | null;\n}\n/**\n * Used to transfer assets from one account to another.\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ITransferTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: typeof TRANSACTION_TYPE.TRANSFER;\n    recipient: string;\n    amount: LONG;\n    attachment: TTypedData;\n    feeAssetId?: string | null;\n    assetId?: string | null;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IMassTransferItem<LONG = string | number> {\n    recipient: string;\n    amount: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IReissueTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: typeof TRANSACTION_TYPE.REISSUE;\n    assetId: string;\n    quantity: LONG;\n    reissuable: boolean;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IBurnTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: typeof TRANSACTION_TYPE.BURN;\n    assetId: string;\n    quantity: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IExchangeTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: typeof TRANSACTION_TYPE.EXCHANGE;\n    order1: IOrder;\n    order2: IOrder;\n    price: LONG;\n    amount: LONG;\n    buyMatcherFee: LONG;\n    sellMatcherFee: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ILeaseTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: typeof TRANSACTION_TYPE.LEASE;\n    amount: LONG;\n    recipient: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ICancelLeaseTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: typeof TRANSACTION_TYPE.CANCEL_LEASE;\n    leaseId: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n * Library requires chainId to be present in this transaction, even thought node returns json without it\n */\n interface IAliasTransaction<LONG = string | number> extends ITransaction<LONG>, WithChainId {\n    type: typeof TRANSACTION_TYPE.ALIAS;\n    alias: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IMassTransferTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: typeof TRANSACTION_TYPE.MASS_TRANSFER;\n    transfers: IMassTransferItem<LONG>[];\n    attachment: TTypedData;\n    assetId?: string | null;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISponsorshipTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: typeof TRANSACTION_TYPE.SPONSORSHIP;\n    /**\n     * Minimal fee amount in sponsored asset. To disable sponsorship set it to 0\n     */\n    minSponsoredAssetFee: LONG;\n    /**\n     * AssetID of sponsored token\n     */\n    assetId: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IDataTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: typeof TRANSACTION_TYPE.DATA;\n    data: Array<TDataEntry | TDeleteRequest>;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IInvokeScriptPayment<LONG = string | number> {\n    assetId: string | null;\n    amount: LONG;\n}\n interface IInvokeScriptCall {\n    /**\n     * Function name\n     */\n    function: string;\n    /**\n     * Array of function arguments. E.g.:\n     * {type: 'integer', value: 200} or\n     * { type: 'binary', value: 'base64:AQa3b8tH'}\n     */\n    args: {\n        type: 'binary' | 'integer' | 'boolean' | 'string';\n        value: string | number | boolean;\n    }[];\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IInvokeScriptTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: typeof TRANSACTION_TYPE.INVOKE_SCRIPT;\n    dApp: string;\n    feeAssetId?: string | null;\n    call?: IInvokeScriptCall;\n    payment?: IInvokeScriptPayment[];\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IUpdateAssetInfoTransaction<LONG = string | number> extends ITransaction<LONG> {\n    type: typeof TRANSACTION_TYPE.UPDATE_ASSET_INFO;\n    assetId: string;\n    name: string;\n    description: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IOrder<LONG = string | number> extends WithProofs, WithSender {\n    version?: number;\n    orderType: 'buy' | 'sell';\n    assetPair: {\n        amountAsset: string | null;\n        priceAsset: string | null;\n    };\n    price: LONG;\n    amount: LONG;\n    timestamp: number;\n    expiration: number;\n    matcherFee: number;\n    matcherPublicKey: string;\n}\n interface IOrderV1<LONG = string | number> extends IOrder<LONG> {\n    version: 1 | undefined;\n}\n interface IOrderV2<LONG = string | number> extends IOrder<LONG> {\n    version: 2;\n}\n interface IOrderV3<LONG = string | number> extends IOrder<LONG> {\n    version: 3;\n    matcherFeeAssetId?: string | null;\n}\n declare type TOrder = IOrderV1 | IOrderV2 | IOrderV3;\n/**\n * CancelOrder object. When this object is sent to matcher, order with 'orderId' will be canceled\n */\n interface ICancelOrder {\n    sender: string;\n    orderId: string;\n    signature: string;\n    hash: string;\n}\n declare type TTxParams<LONG = string | number> = IAliasParams<LONG> | IBurnParams<LONG> | IInvokeScriptParams<LONG> | ICancelLeaseParams<LONG> | IDataParams<LONG> | IIssueParams<LONG> | ILeaseParams<LONG> | IMassTransferParams<LONG> | IReissueParams<LONG> | ISetAssetScriptParams<LONG> | ISetScriptParams<LONG> | ISponsorshipParams<LONG> | ITransferParams<LONG> | IUpdateAssetInfoParams<LONG>;\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IBasicParams<LONG = string | number> {\n    /**\n     * Transaction fee. If not set, fee will be calculated automatically\n     */\n    fee?: LONG;\n    /**\n     * If fee is not set, this value will be added to automatically calculated fee. E.x.:\n     * Account is scripted and 400000 fee more is required.\n     */\n    additionalFee?: number;\n    /**\n     * If not set, public key will be derived from seed phrase. You should provide senderPublicKey in two cases:\n     * 1. Account, from which this tx should be sent, differs from tx signer. E.g., we have smart account that requires 2 signatures.\n     * 2. You to create tx without proof. Therefore no seed is provided.\n     */\n    senderPublicKey?: string;\n    /**\n     * Transaction timestamp. If not set current timestamp will be used. Date.now()\n     */\n    timestamp?: number;\n    /**\n     * Network byte. Could be set as number or as char.\n     * If set as char(string), charCodeAt(0) will be used. E.g.,\n     * 'W' will be converted to '87'\n     * If not set, 87 will be used as default\n     */\n    chainId?: string | number;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IAliasParams<LONG = string | number> extends IBasicParams<LONG> {\n    alias: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IBurnParams<LONG = string | number> extends IBasicParams<LONG> {\n    assetId: string;\n    quantity: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ICancelLeaseParams<LONG = string | number> extends IBasicParams<LONG> {\n    leaseId: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IDataParams<LONG = string | number> extends IBasicParams<LONG> {\n    data: Array<TDataEntry | ITypelessDataEntry | TDeleteRequest>;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IIssueParams<LONG = string | number> extends IBasicParams<LONG> {\n    /**\n     * @minLength 4\n     * @maxLength 16\n     */\n    name: string;\n    /**\n     * @maxLength 1000\n     */\n    description: string;\n    quantity: LONG;\n    decimals?: number;\n    reissuable?: boolean;\n    script?: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ILeaseParams<LONG = string | number> extends IBasicParams<LONG> {\n    recipient: string;\n    amount: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IMassTransferParams<LONG = string | number> extends IBasicParams<LONG> {\n    transfers: IMassTransferItem[];\n    /**\n     * Bytearray encoded as base string\n     */\n    attachment?: string | TTypedData;\n    assetId?: string | null;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IOrderParams<LONG = string | number> {\n    matcherPublicKey: string;\n    price: LONG;\n    amount: LONG;\n    orderType: 'buy' | 'sell';\n    amountAsset: string | null;\n    priceAsset: string | null;\n    senderPublicKey?: string;\n    matcherFee?: number;\n    timestamp?: number;\n    expiration?: number;\n    matcherFeeAssetId?: string | null;\n}\n interface ICancelOrderParams {\n    orderId: string;\n    signature?: string;\n    senderPublicKey?: string;\n}\n interface IWavesAuthParams {\n    timestamp?: number;\n    publicKey?: string;\n}\n interface IWavesAuth {\n    timestamp: number;\n    address: string;\n    publicKey: string;\n    hash: string;\n    signature: string;\n}\n interface IAuthParams {\n    data: string;\n    host: string;\n    publicKey?: string;\n}\n interface IAuth {\n    data: string;\n    host: string;\n    address: string;\n    publicKey: string;\n    hash: string;\n    signature: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IReissueParams<LONG = string | number> extends IBasicParams<LONG> {\n    assetId: string;\n    quantity: LONG;\n    reissuable: boolean;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISetAssetScriptParams<LONG = string | number> extends IBasicParams<LONG> {\n    /**\n     * Compiled script encoded as base64 string\n     */\n    script: string;\n    assetId: string;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISetScriptParams<LONG = string | number> extends IBasicParams<LONG> {\n    /**\n     * Compiled script encoded as base64 string\n     */\n    script: string | null;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ISponsorshipParams<LONG = string | number> extends IBasicParams<LONG> {\n    /**\n     * AssetID of sponsored token\n     */\n    assetId: string;\n    /**\n     * Minimal fee amount in sponsored asset. To disable sponsorship set it to 0\n     */\n    minSponsoredAssetFee: LONG;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface ITransferParams<LONG = string | number> extends IBasicParams<LONG> {\n    /**\n     * Can be either address(base58 encoded 24 byte address) or alias.\n     * Alias should be used like 'alias:{chainId}:{alias}>'. E.g.:\n     * If we have alias 'foo', and we want TESTNET transaction, recipient should be 'alias:T:foo'\n     */\n    recipient: string;\n    amount: LONG;\n    assetId?: string | null;\n    /**\n     * Fee can be paid in custom token if sponsorship has been set for this token\n     */\n    feeAssetId?: string | null;\n    /**\n     * Bytearray encoded as base58 string\n     */\n    attachment?: string | TTypedData;\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IInvokeScriptParams<LONG = string | number> extends IBasicParams<LONG> {\n    dApp: string;\n    feeAssetId?: string | null;\n    call?: {\n        function: string;\n        args?: {\n            type: 'binary' | 'integer' | 'boolean' | 'string';\n            value: string | LONG | boolean;\n        }[];\n    };\n    payment?: {\n        assetId?: string | null;\n        amount: LONG;\n    }[];\n}\n/**\n * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used\n */\n interface IUpdateAssetInfoParams<LONG = string | number> extends IBasicParams<LONG> {\n    /**\n     * Id of previously issued asset\n     */\n    assetId: string;\n    /**\n     * New asset name\n     */\n    name: string;\n    /**\n     * New asset description\n     */\n    description: string;\n}\n\n// Type definitions for mocha 5.2\n// Project: https://mochajs.org\n// Definitions by: Kazi Manzur Rashid <https://github.com/kazimanzurrashid>\n//                 otiai10 <https://github.com/otiai10>\n//                 jt000 <https://github.com/jt000>\n//                 Vadim Macagon <https://github.com/enlight>\n//                 Andrew Bradley <https://github.com/cspotcode>\n//                 Dmitrii Sorin <https://github.com/1999>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.1\n\n/**\n * Mocha API\n *\n * @see https://mochajs.org/api/mocha\n */\ndeclare class Mocha {\n    private _growl;\n    private _reporter;\n    private _ui;\n\n    constructor(options?: Mocha.MochaOptions);\n\n    suite: Mocha.Suite;\n    files: string[];\n    options: Mocha.MochaInstanceOptions;\n\n    /**\n     * Enable or disable bailing on the first failure.\n     *\n     * @see https://mochajs.org/api/mocha#bail\n     */\n    bail(bail?: boolean): this;\n\n    /**\n     * Add test `file`.\n     *\n     * @see https://mochajs.org/api/mocha#addFile\n     */\n    addFile(file: string): this;\n\n    /**\n     * Set reporter to one of the built-in reporters.\n     *\n     * @see https://mochajs.org/api/mocha#reporter\n     */\n    reporter(reporter: Mocha.Reporter, reporterOptions?: any): this;\n\n    /**\n     * Set reporter to the provided constructor, one of the built-in reporters, or loads a reporter\n     * from a module path. Defaults to `\"spec\"`.\n     *\n     * @see https://mochajs.org/api/mocha#reporter\n     */\n    reporter(reporter?: string | Mocha.ReporterConstructor, reporterOptions?: any): this;\n\n    /**\n     * Set test UI to one of the built-in test interfaces.\n     *\n     * @see https://mochajs.org/api/mocha#ui\n     */\n    ui(name: Mocha.Interface): this;\n\n    /**\n     * Set test UI to one of the built-in test interfaces or loads a test interface from a module\n     * path. Defaults to `\"bdd\"`.\n     *\n     * @see https://mochajs.org/api/mocha#ui\n     */\n    ui(name?: string): this;\n\n    /**\n     * Escape string and add it to grep as a RegExp.\n     *\n     * @see https://mochajs.org/api/mocha#fgrep\n     */\n    fgrep(str: string): this;\n\n    /**\n     * Add regexp to grep, if `re` is a string it is escaped.\n     *\n     * @see https://mochajs.org/api/mocha#grep\n     */\n    grep(re: string | RegExp): this;\n\n    /**\n     * Invert `.grep()` matches.\n     *\n     * @see https://mochajs.org/api/mocha#invert\n     */\n    invert(): this;\n\n    /**\n     * Ignore global leaks.\n     *\n     * @see https://mochajs.org/api/mocha#ignoreLeaks\n     */\n    ignoreLeaks(ignore: boolean): this;\n\n    /**\n     * Enable global leak checking.\n     *\n     * @see https://mochajs.org/api/mocha#checkLeaks\n     */\n    checkLeaks(): this;\n\n    /**\n     * Display long stack-trace on failing\n     *\n     * @see https://mochajs.org/api/mocha#fullTrace\n     */\n    fullTrace(): this;\n\n    /**\n     * Enable growl support.\n     *\n     * @see https://mochajs.org/api/mocha#growl\n     */\n    growl(): this;\n\n    /**\n     * Ignore `globals` array or string.\n     *\n     * @see https://mochajs.org/api/mocha#globals\n     */\n    globals(globals: string | ReadonlyArray<string>): this;\n\n    /**\n     * Emit color output.\n     *\n     * @see https://mochajs.org/api/mocha#useColors\n     */\n    useColors(colors: boolean): this;\n\n    /**\n     * Use inline diffs rather than +/-.\n     *\n     * @see https://mochajs.org/api/mocha#useInlineDiffs\n     */\n    useInlineDiffs(inlineDiffs: boolean): this;\n\n    /**\n     * Do not show diffs at all.\n     *\n     * @see https://mochajs.org/api/mocha#hideDiff\n     */\n    hideDiff(hideDiff: boolean): this;\n\n    /**\n     * Set the timeout in milliseconds.\n     *\n     * @see https://mochajs.org/api/mocha#timeout\n     */\n    timeout(timeout: string | number): this;\n\n    /**\n     * Set the number of times to retry failed tests.\n     *\n     * @see https://mochajs.org/api/mocha#retries\n     */\n    retries(n: number): this;\n\n    /**\n     * Set slowness threshold in milliseconds.\n     *\n     * @see https://mochajs.org/api/mocha#slow\n     */\n    slow(slow: string | number): this;\n\n    /**\n     * Enable timeouts.\n     *\n     * @see https://mochajs.org/api/mocha#enableTimeouts\n     */\n    enableTimeouts(enabled?: boolean): this;\n\n    /**\n     * Makes all tests async (accepting a callback)\n     *\n     * @see https://mochajs.org/api/mocha#asyncOnly.\n     */\n    asyncOnly(): this;\n\n    /**\n     * Disable syntax highlighting (in browser).\n     *\n     * @see https://mochajs.org/api/mocha#noHighlighting\n     */\n    noHighlighting(): this;\n\n    /**\n     * Enable uncaught errors to propagate (in browser).\n     *\n     * @see https://mochajs.org/api/mocha#allowUncaught\n     */\n    allowUncaught(): boolean;\n\n    /**\n     * Delay root suite execution.\n     *\n     * @see https://mochajs.org/api/mocha#delay\n     */\n    delay(): boolean;\n\n    /**\n     * Tests marked only fail the suite\n     *\n     * @see https://mochajs.org/api/mocha#forbidOnly\n     */\n    forbidOnly(): boolean;\n\n    /**\n     * Pending tests and tests marked skip fail the suite\n     *\n     * @see https://mochajs.org/api/mocha#forbidPending\n     */\n    forbidPending(): boolean;\n\n    /**\n     * Run tests and invoke `fn()` when complete.\n     *\n     * Note that `run` relies on Node's `require` to execute\n     * the test interface functions and will be subject to the\n     * cache - if the files are already in the `require` cache,\n     * they will effectively be skipped. Therefore, to run tests\n     * multiple times or to run tests in files that are already\n     * in the `require` cache, make sure to clear them from the\n     * cache first in whichever manner best suits your needs.\n     *\n     * @see https://mochajs.org/api/mocha#run\n     */\n    run(fn?: (failures: number) => void): Mocha.Runner;\n\n    /**\n     * Load registered files.\n     *\n     * @see https://mochajs.org/api/mocha#loadFiles\n     */\n    protected loadFiles(fn?: () => void): void;\n}\n\ndeclare namespace Mocha {\n    namespace utils {\n        /**\n         * Compute a slug from the given `str`.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.slug\n         */\n        function slug(str: string): string;\n\n        /**\n         * Strip the function definition from `str`, and re-indent for pre whitespace.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.clean\n         */\n        function clean(str: string): string;\n\n        /**\n         * Highlight the given string of `js`.\n         */\n        function highlight(js: string): string;\n\n        /**\n         * Takes some variable and asks `Object.prototype.toString()` what it thinks it is.\n         */\n        function type(value: any): string;\n\n        /**\n         * Stringify `value`. Different behavior depending on type of value:\n         *\n         * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.\n         * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n         * - If `value` is an *empty* object, function, or array, returns `'{}'`, `'[Function]'`, or `'[]'` respectively.\n         * - If `value` has properties, call canonicalize} on it, then return result of `JSON.stringify()`\n         *\n         * @see https://mochajs.org/api/module-utils.html#.stringify\n         */\n        function stringify(value: any): string;\n\n        /**\n         * Return a new Thing that has the keys in sorted order. Recursive.\n         *\n         * If the Thing...\n         * - has already been seen, return string `'[Circular]'`\n         * - is `undefined`, return string `'[undefined]'`\n         * - is `null`, return value `null`\n         * - is some other primitive, return the value\n         * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n         * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.\n         * - is an empty `Array`, `Object`, or `Function`, returns `'[]'`, `'{}'`, or `'[Function]'` respectively.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.canonicalize\n         */\n        function canonicalize(value: any, stack: any[], typeHint: string): any;\n\n        /**\n         * Lookup file names at the given `path`.\n         *\n         * @see https://mochajs.org/api/Mocha.utils.html#.exports.lookupFiles\n         */\n        function lookupFiles(filepath: string, extensions?: string[], recursive?: boolean): string[];\n\n        /**\n         * Generate an undefined error with a message warning the user.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.undefinedError\n         */\n        function undefinedError(): Error;\n\n        /**\n         * Generate an undefined error if `err` is not defined.\n         *\n         * @see https://mochajs.org/api/module-utils.html#.getError\n         */\n        function getError(err: Error | undefined): Error;\n\n        /**\n         * When invoking this function you get a filter function that get the Error.stack as an\n         * input, and return a prettify output. (i.e: strip Mocha and internal node functions from\n         * stack trace).\n         *\n         * @see https://mochajs.org/api/module-utils.html#.stackTraceFilter\n         */\n        function stackTraceFilter(): (stack: string) => string;\n    }\n\n    namespace interfaces {\n        function bdd(suite: Suite): void;\n        function tdd(suite: Suite): void;\n        function qunit(suite: Suite): void;\n        function exports(suite: Suite): void;\n    }\n\n    // #region Test interface augmentations\n\n    interface HookFunction {\n        /**\n         * [bdd, qunit, tdd] Describe a \"hook\" to execute the given callback `fn`. The name of the\n         * function is used as the name of the hook.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: Func): void;\n\n        /**\n         * [bdd, qunit, tdd] Describe a \"hook\" to execute the given callback `fn`. The name of the\n         * function is used as the name of the hook.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: AsyncFunc): void;\n\n        /**\n         * [bdd, qunit, tdd] Describe a \"hook\" to execute the given `title` and callback `fn`.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (name: string, fn?: Func): void;\n\n        /**\n         * [bdd, qunit, tdd] Describe a \"hook\" to execute the given `title` and callback `fn`.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (name: string, fn?: AsyncFunc): void;\n    }\n\n    interface SuiteFunction {\n        /**\n         * [bdd, tdd] Describe a \"suite\" with the given `title` and callback `fn` containing\n         * nested suites.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn: (this: Suite) => void): Suite;\n\n        /**\n         * [qunit] Describe a \"suite\" with the given `title`.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string): Suite;\n\n        /**\n         * [bdd, tdd, qunit] Indicates this suite should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        only: ExclusiveSuiteFunction;\n\n        /**\n         * [bdd, tdd] Indicates this suite should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        skip: PendingSuiteFunction;\n    }\n\n    interface ExclusiveSuiteFunction {\n        /**\n         * [bdd, tdd] Describe a \"suite\" with the given `title` and callback `fn` containing\n         * nested suites. Indicates this suite should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn: (this: Suite) => void): Suite;\n\n        /**\n         * [qunit] Describe a \"suite\" with the given `title`. Indicates this suite should be executed\n         * exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string): Suite;\n    }\n\n    /**\n     * [bdd, tdd] Describe a \"suite\" with the given `title` and callback `fn` containing\n     * nested suites. Indicates this suite should not be executed.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @returns [bdd] `Suite`\n     * @returns [tdd] `void`\n     */\n    interface PendingSuiteFunction {\n        (title: string, fn: (this: Suite) => void): Suite | void;\n    }\n\n    interface TestFunction {\n        /**\n         * Describe a specification or test-case with the given callback `fn` acting as a thunk.\n         * The name of the function is used as the name of the test.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: Func): Test;\n\n        /**\n         * Describe a specification or test-case with the given callback `fn` acting as a thunk.\n         * The name of the function is used as the name of the test.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: AsyncFunc): Test;\n\n        /**\n         * Describe a specification or test-case with the given `title` and callback `fn` acting\n         * as a thunk.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: Func): Test;\n\n        /**\n         * Describe a specification or test-case with the given `title` and callback `fn` acting\n         * as a thunk.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: AsyncFunc): Test;\n\n        /**\n         * Indicates this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        only: ExclusiveTestFunction;\n\n        /**\n         * Indicates this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        skip: PendingTestFunction;\n\n        /**\n         * Number of attempts to retry.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        retries(n: number): void;\n    }\n\n    interface ExclusiveTestFunction {\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`\n         * acting as a thunk. The name of the function is used as the name of the test. Indicates\n         * this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: Func): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`\n         * acting as a thunk. The name of the function is used as the name of the test. Indicates\n         * this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: AsyncFunc): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and\n         * callback `fn` acting as a thunk. Indicates this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: Func): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and\n         * callback `fn` acting as a thunk. Indicates this test should be executed exclusively.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: AsyncFunc): Test;\n    }\n\n    interface PendingTestFunction {\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`\n         * acting as a thunk. The name of the function is used as the name of the test. Indicates\n         * this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: Func): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`\n         * acting as a thunk. The name of the function is used as the name of the test. Indicates\n         * this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (fn: AsyncFunc): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and\n         * callback `fn` acting as a thunk. Indicates this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: Func): Test;\n\n        /**\n         * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and\n         * callback `fn` acting as a thunk. Indicates this test should not be executed.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        (title: string, fn?: AsyncFunc): Test;\n    }\n\n    /**\n     * Execute after each test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#afterEach\n     */\n    let afterEach: HookFunction;\n\n    /**\n     * Execute after running tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#after\n     */\n    let after: HookFunction;\n\n    /**\n     * Execute before each test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#beforeEach\n     */\n    let beforeEach: HookFunction;\n\n    /**\n     * Execute before running tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#before\n     */\n    let before: HookFunction;\n\n    /**\n     * Describe a \"suite\" containing nested suites and tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let describe: SuiteFunction;\n\n    /**\n     * Describes a test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let it: TestFunction;\n\n    /**\n     * Describes a pending test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let xit: PendingTestFunction;\n\n    /**\n     * Execute before each test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#beforeEach\n     */\n    let setup: HookFunction;\n\n    /**\n     * Execute before running tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#before\n     */\n    let suiteSetup: HookFunction;\n\n    /**\n     * Execute after running tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#after\n     */\n    let suiteTeardown: HookFunction;\n\n    /**\n     * Describe a \"suite\" containing nested suites and tests.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let suite: SuiteFunction;\n\n    /**\n     * Execute after each test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#afterEach\n     */\n    let teardown: HookFunction;\n\n    /**\n     * Describes a test case.\n     *\n     * - _Only available when invoked via the mocha CLI._\n     */\n    let test: TestFunction;\n\n    /**\n     * Triggers root suite execution.\n     *\n     * - _Only available if flag --delay is passed into Mocha._\n     * - _Only available when invoked via the mocha CLI._\n     *\n     * @see https://mochajs.org/api/global.html#runWithSuite\n     */\n    function run(): void;\n\n    // #endregion Test interface augmentations\n\n    namespace reporters {\n        /**\n         * Initialize a new `Base` reporter.\n         *\n         * All other reporters generally inherit from this reporter, providing stats such as test duration,\n         * number of tests passed / failed, etc.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Base.html\n         */\n        class Base {\n            constructor(runner: Runner, options?: MochaOptions);\n            /** @deprecated Use the overload that accepts `Mocha.Runner` instead. */\n            constructor(runner: IRunner, options?: MochaOptions);\n\n            /**\n             * Test run statistics\n             */\n            stats: Stats;\n\n            /**\n             * Test failures\n             */\n            failures: Test[];\n\n            /**\n             * The configured runner\n             */\n            runner: Runner;\n\n            /**\n             * Output common epilogue used by many of the bundled reporters.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.Base.html#.Base#epilogue\n             */\n            epilogue(): void;\n\n            done?(failures: number, fn?: (failures: number) => void): void;\n        }\n\n        namespace Base {\n            /**\n             * Enables coloring by default\n             *\n             * @see https://mochajs.org/api/module-base#.useColors\n             */\n            let useColors: boolean;\n\n            /**\n             * Inline diffs instead of +/-\n             *\n             * @see https://mochajs.org/api/module-base#.inlineDiffs\n             */\n            let inlineDiffs: boolean;\n\n            /**\n             * Default color map\n             *\n             * @see https://mochajs.org/api/module-base#.colors\n             */\n            const colors: ColorMap;\n\n            /**\n             * Default color map\n             *\n             * @see https://mochajs.org/api/module-base#.colors\n             */\n            interface ColorMap {\n                // added by Base\n                pass: number;\n                fail: number;\n                \"bright pass\": number;\n                \"bright fail\": number;\n                \"bright yellow\": number;\n                pending: number;\n                suite: number;\n                \"error title\": number;\n                \"error message\": number;\n                \"error stack\": number;\n                checkmark: number;\n                fast: number;\n                medium: number;\n                slow: number;\n                green: number;\n                light: number;\n                \"diff gutter\": number;\n                \"diff added\": number;\n                \"diff removed\": number;\n\n                // added by Progress\n                progress: number;\n\n                // added by Landing\n                plane: number;\n                \"plane crash\": number;\n                runway: number;\n\n                [key: string]: number;\n            }\n\n            /**\n             * Default symbol map\n             *\n             * @see https://mochajs.org/api/module-base#.symbols\n             */\n            const symbols: SymbolMap;\n\n            /**\n             * Default symbol map\n             *\n             * @see https://mochajs.org/api/module-base#.symbols\n             */\n            interface SymbolMap {\n                ok: string;\n                err: string;\n                dot: string;\n                comma: string;\n                bang: string;\n                [key: string]: string;\n            }\n\n            /**\n             * Color `str` with the given `type` (from `colors`)\n             *\n             * @see https://mochajs.org/api/module-base#.color\n             */\n            function color(type: string, str: string): string;\n\n            /**\n             * Expose terminal window size\n             *\n             * @see https://mochajs.org/api/module-base#.window\n             */\n            const window: {\n                width: number;\n            };\n\n            /**\n             * ANSI TTY control sequences common among reporters.\n             *\n             * @see https://mochajs.org/api/module-base#.cursor\n             */\n            namespace cursor {\n                /**\n                 * Hides the cursor\n                 */\n                function hide(): void;\n\n                /**\n                 * Shows the cursor\n                 */\n                function show(): void;\n\n                /**\n                 * Deletes the current line\n                 */\n                function deleteLine(): void;\n\n                /**\n                 * Moves to the beginning of the line\n                 */\n                function beginningOfLine(): void;\n\n                /**\n                 * Clears the line and moves to the beginning of the line.\n                 */\n                function CR(): void;\n            }\n\n            /**\n             * Returns a diff between two strings with colored ANSI output.\n             *\n             * @see https://mochajs.org/api/module-base#.generateDiff\n             */\n            function generateDiff(actual: string, expected: string): string;\n\n            /**\n             * Output the given `failures` as a list.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.Base.html#.exports.list1\n             */\n            function list(failures: Test[]): void;\n        }\n\n        /**\n         * Initialize a new `Dot` matrix test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Dot.html\n         */\n        class Dot extends Base {\n        }\n\n        /**\n         * Initialize a new `Doc` reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Doc.html\n         */\n        class Doc extends Base {\n        }\n\n        /**\n         * Initialize a new `TAP` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.TAP.html\n         */\n        class TAP extends Base {\n        }\n\n        /**\n         * Initialize a new `JSON` reporter\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.JSON.html\n         */\n        class JSON extends Base {\n        }\n\n        /**\n         * Initialize a new `HTML` reporter.\n         *\n         * - _This reporter cannot be used on the console._\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.HTML.html\n         */\n        class HTML extends Base {\n            /**\n             * Provide suite URL.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.HTML.html#suiteURL\n             */\n            suiteURL(suite: Suite): string;\n\n            /**\n             * Provide test URL.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.HTML.html#testURL\n             */\n            testURL(test: Test): string;\n\n            /**\n             * Adds code toggle functionality for the provided test's list element.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.HTML.html#addCodeToggle\n             */\n            addCodeToggle(el: HTMLLIElement, contents: string): void;\n        }\n\n        /**\n         * Initialize a new `List` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.List.html\n         */\n        class List extends Base {\n        }\n\n        /**\n         * Initialize a new `Min` minimal test reporter (best used with --watch).\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Min.html\n         */\n        class Min extends Base {\n        }\n\n        /**\n         * Initialize a new `Spec` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Spec.html\n         */\n        class Spec extends Base {\n        }\n\n        /**\n         * Initialize a new `NyanCat` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Nyan.html\n         */\n        class Nyan extends Base {\n            private colorIndex;\n            private numberOfLines;\n            private rainbowColors;\n            private scoreboardWidth;\n            private tick;\n            private trajectories;\n            private trajectoryWidthMax;\n            private draw;\n            private drawScoreboard;\n            private appendRainbow;\n            private drawRainbow;\n            private drawNyanCat;\n            private face;\n            private cursorUp;\n            private cursorDown;\n            private generateColors;\n            private rainbowify;\n        }\n\n        /**\n         * Initialize a new `XUnit` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.XUnit.html\n         */\n        class XUnit extends Base {\n            constructor(runner: Runner, options?: XUnit.MochaOptions);\n            /** @deprecated Use the overload that accepts `Mocha.Runner` instead. */\n            constructor(runner: IRunner, options?: XUnit.MochaOptions);\n\n            /**\n             * Override done to close the stream (if it's a file).\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.XUnit.html#done\n             */\n            done(failures: number, fn: (failures: number) => void): void;\n\n            /**\n             * Write out the given line.\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.XUnit.html#write\n             */\n            write(line: string): void;\n\n            /**\n             * Output tag for the given `test.`\n             *\n             * @see https://mochajs.org/api/Mocha.reporters.XUnit.html#test\n             */\n            test(test: Test): void;\n        }\n\n        namespace XUnit {\n            interface MochaOptions extends Mocha.MochaOptions {\n                reporterOptions?: ReporterOptions;\n            }\n\n            interface ReporterOptions {\n                output?: string;\n                suiteName?: string;\n            }\n        }\n\n        /**\n         * Initialize a new `Markdown` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Markdown.html\n         */\n        class Markdown extends Base {\n        }\n\n        /**\n         * Initialize a new `Progress` bar test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Progress.html\n         */\n        class Progress extends Base {\n            constructor(runner: Runner, options?: Progress.MochaOptions);\n            /** @deprecated Use the overload that accepts `Mocha.Runner` instead. */\n            constructor(runner: IRunner, options?: Progress.MochaOptions);\n        }\n\n        namespace Progress {\n            interface MochaOptions extends Mocha.MochaOptions {\n                reporterOptions?: ReporterOptions;\n            }\n\n            interface ReporterOptions {\n                open?: string;\n                complete?: string;\n                incomplete?: string;\n                close?: string;\n                verbose?: boolean;\n            }\n        }\n\n        /**\n         * Initialize a new `Landing` reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.Landing.html\n         */\n        class Landing extends Base {\n        }\n\n        /**\n         * Initialize a new `JSONStream` test reporter.\n         *\n         * @see https://mochajs.org/api/Mocha.reporters.JSONStream.html\n         */\n        class JSONStream extends Base {\n        }\n\n        // value-only aliases\n        const base: typeof Base;\n        const dot: typeof Dot;\n        const doc: typeof Doc;\n        const tap: typeof TAP;\n        const json: typeof JSON;\n        const html: typeof HTML;\n        const list: typeof List;\n        const spec: typeof Spec;\n        const nyan: typeof Nyan;\n        const xunit: typeof XUnit;\n        const markdown: typeof Markdown;\n        const progress: typeof Progress;\n        const landing: typeof Landing;\n        // NOTE: not possible to type this correctly:\n        // const \"json-stream\": typeof JSONStream;\n    }\n\n    /**\n     * Initialize a new `Runnable` with the given `title` and callback `fn`.\n     *\n     * @see https://mochajs.org/api/Runnable.html\n     */\n    class Runnable {\n        private _slow;\n        private _enableTimeouts;\n        private _retries;\n        private _currentRetry;\n        private _timeout;\n        private _timeoutError;\n\n        constructor(title: string, fn?: Func | AsyncFunc);\n\n        title: string;\n        fn: Func | AsyncFunc | undefined;\n        body: string;\n        async: boolean;\n        sync: boolean;\n        timedOut: boolean;\n        pending: boolean;\n        duration?: number;\n        parent?: Suite;\n        state?: \"failed\" | \"passed\";\n        timer?: any;\n        ctx?: Context;\n        callback?: Done;\n        allowUncaught?: boolean;\n        file?: string;\n\n        /**\n         * Get test timeout.\n         *\n         * @see https://mochajs.org/api/Runnable.html#timeout\n         */\n        timeout(): number;\n\n        /**\n         * Set test timeout.\n         *\n         * @see https://mochajs.org/api/Runnable.html#timeout\n         */\n        timeout(ms: string | number): this;\n\n        /**\n         * Get test slowness threshold.\n         *\n         * @see https://mochajs.org/api/Runnable.html#slow\n         */\n        slow(): number;\n\n        /**\n         * Set test slowness threshold.\n         *\n         * @see https://mochajs.org/api/Runnable.html#slow\n         */\n        slow(ms: string | number): this;\n\n        /**\n         * Get whether timeouts are enabled.\n         *\n         * @see https://mochajs.org/api/Runnable.html#enableTimeouts\n         */\n        enableTimeouts(): boolean;\n\n        /**\n         * Set whether timeouts are enabled.\n         *\n         * @see https://mochajs.org/api/Runnable.html#enableTimeouts\n         */\n        enableTimeouts(enabled: boolean): this;\n\n        /**\n         * Halt and mark as pending.\n         */\n        skip(): never;\n\n        /**\n         * Check if this runnable or its parent suite is marked as pending.\n         *\n         * @see https://mochajs.org/api/Runnable.html#isPending\n         */\n        isPending(): boolean;\n\n        /**\n         * Return `true` if this Runnable has failed.\n         */\n        isFailed(): boolean;\n\n        /**\n         * Return `true` if this Runnable has passed.\n         */\n        isPassed(): boolean;\n\n        /**\n         * Set or get number of retries.\n         *\n         * @see https://mochajs.org/api/Runnable.html#retries\n         */\n        retries(): number;\n\n        /**\n         * Set or get number of retries.\n         *\n         * @see https://mochajs.org/api/Runnable.html#retries\n         */\n        retries(n: number): void;\n\n        /**\n         * Set or get current retry\n         *\n         * @see https://mochajs.org/api/Runnable.html#currentRetry\n         */\n        protected currentRetry(): number;\n\n        /**\n         * Set or get current retry\n         *\n         * @see https://mochajs.org/api/Runnable.html#currentRetry\n         */\n        protected currentRetry(n: number): void;\n\n        /**\n         * Return the full title generated by recursively concatenating the parent's full title.\n         */\n        fullTitle(): string;\n\n        /**\n         * Return the title path generated by concatenating the parent's title path with the title.\n         */\n        titlePath(): string[];\n\n        /**\n         * Clear the timeout.\n         *\n         * @see https://mochajs.org/api/Runnable.html#clearTimeout\n         */\n        clearTimeout(): void;\n\n        /**\n         * Inspect the runnable void of private properties.\n         *\n         * @see https://mochajs.org/api/Runnable.html#inspect\n         */\n        inspect(): string;\n\n        /**\n         * Reset the timeout.\n         *\n         * @see https://mochajs.org/api/Runnable.html#resetTimeout\n         */\n        resetTimeout(): void;\n\n        /**\n         * Get a list of whitelisted globals for this test run.\n         *\n         * @see https://mochajs.org/api/Runnable.html#globals\n         */\n        globals(): string[];\n\n        /**\n         * Set a list of whitelisted globals for this test run.\n         *\n         * @see https://mochajs.org/api/Runnable.html#globals\n         */\n        globals(globals: ReadonlyArray<string>): void;\n\n        /**\n         * Run the test and invoke `fn(err)`.\n         *\n         * @see https://mochajs.org/api/Runnable.html#run\n         */\n        run(fn: Done): void;\n    }\n\n    // #region Runnable \"error\" event\n    interface Runnable extends NodeJS.EventEmitter {\n        on(event: \"error\", listener: (error: any) => void): this;\n        once(event: \"error\", listener: (error: any) => void): this;\n        addListener(event: \"error\", listener: (error: any) => void): this;\n        removeListener(event: \"error\", listener: (error: any) => void): this;\n        prependListener(event: \"error\", listener: (error: any) => void): this;\n        prependOnceListener(event: \"error\", listener: (error: any) => void): this;\n        emit(name: \"error\", error: any): boolean;\n    }\n    // #endregion Runnable \"error\" event\n    // #region Runnable untyped events\n    interface Runnable extends NodeJS.EventEmitter {\n        on(event: string, listener: (...args: any[]) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        removeListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        emit(name: string, ...args: any[]): boolean;\n    }\n    // #endregion Runnable untyped events\n\n    /**\n     * Test context\n     *\n     * @see https://mochajs.org/api/module-Context.html#~Context\n     */\n    class Context {\n        private _runnable;\n\n        test?: Runnable;\n        currentTest?: Test;\n\n        /**\n         * Get the context `Runnable`.\n         */\n        runnable(): Runnable;\n\n        /**\n         * Set the context `Runnable`.\n         */\n        runnable(runnable: Runnable): this;\n        /** @deprecated Use the overload that accepts `Mocha.Runnable` instead. */\n        runnable(runnable: IRunnable): this;\n\n        /**\n         * Get test timeout.\n         */\n        timeout(): number;\n\n        /**\n         * Set test timeout.\n         */\n        timeout(ms: string | number): this;\n\n        /**\n         * Get whether timeouts are enabled.\n         */\n        enableTimeouts(): boolean;\n\n        /**\n         * Set whether timeouts are enabled.\n         */\n        enableTimeouts(enabled: boolean): this;\n\n        /**\n         * Get test slowness threshold.\n         */\n        slow(): number;\n\n        /**\n         * Set test slowness threshold.\n         */\n        slow(ms: string | number): this;\n\n        /**\n         * Mark a test as skipped.\n         */\n        skip(): never;\n\n        /**\n         * Get the number of allowed retries on failed tests.\n         */\n        retries(): number;\n\n        /**\n         * Set the number of allowed retries on failed tests.\n         */\n        retries(n: number): this;\n\n        [key: string]: any;\n    }\n\n    /**\n     * Initialize a `Runner` for the given `suite`.\n     *\n     * @see https://mochajs.org/api/Mocha.Runner.html\n     */\n    class Runner {\n        private _globals;\n        private _abort;\n        private _delay;\n        private _defaultGrep;\n        private next;\n        private hookErr;\n        private prevGlobalsLength;\n        private nextSuite;\n\n        constructor(suite: Suite, delay: boolean);\n\n        /** @deprecated Use the overload that accepts `Mocha.Suite` instead. */\n        constructor(suite: ISuite, delay: boolean);\n\n        suite: Suite;\n        started: boolean;\n        total: number;\n        failures: number;\n        asyncOnly?: boolean;\n        allowUncaught?: boolean;\n        fullStackTrace?: boolean;\n        forbidOnly?: boolean;\n        forbidPending?: boolean;\n        ignoreLeaks?: boolean;\n        test?: Test;\n        currentRunnable?: Runnable;\n        stats?: Stats; // added by reporters\n\n        /**\n         * Run tests with full titles matching `re`. Updates runner.total\n         * with number of tests matched.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#grep\n         */\n        grep(re: RegExp, invert: boolean): this;\n\n        /**\n         * Returns the number of tests matching the grep search for the\n         * given suite.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#grepTotal\n         */\n        grepTotal(suite: Suite): number;\n\n        /** @deprecated Use the overload that accepts `Mocha.Suite` instead. */\n        grepTotal(suite: ISuite): number;\n\n        /**\n         * Gets the allowed globals.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#globals\n         */\n        globals(): string[];\n\n        /**\n         * Allow the given `arr` of globals.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#globals\n         */\n        globals(arr: ReadonlyArray<string>): this;\n\n        /**\n         * Run the root suite and invoke `fn(failures)` on completion.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#run\n         */\n        run(fn?: (failures: number) => void): this;\n\n        /**\n         * Cleanly abort execution.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#.Runner#abort\n         */\n        abort(): this;\n\n        /**\n         * Handle uncaught exceptions.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#uncaught\n         */\n        uncaught(err: any): void;\n\n        /**\n         * Wrapper for setImmediate, process.nextTick, or browser polyfill.\n         */\n        protected static immediately(callback: Function): void;\n\n        /**\n         * Return a list of global properties.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#globalProps\n         */\n        protected globalProps(): string[];\n\n        /**\n         * Check for global variable leaks.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#checkGlobals\n         */\n        protected checkGlobals(test: Test): void;\n\n        /**\n         * Fail the given `test`.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#fail\n         */\n        protected fail(test: Test, err: any): void;\n\n        /**\n         * Fail the given `hook` with `err`.\n         *\n         * Hook failures work in the following pattern:\n         * - If bail, then exit\n         * - Failed `before` hook skips all tests in a suite and subsuites,\n         *   but jumps to corresponding `after` hook\n         * - Failed `before each` hook skips remaining tests in a\n         *   suite and jumps to corresponding `after each` hook,\n         *   which is run only once\n         * - Failed `after` hook does not alter\n         *   execution order\n         * - Failed `after each` hook skips remaining tests in a\n         *   suite and subsuites, but executes other `after each`\n         *   hooks\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#failHook\n         */\n        protected failHook(hook: Hook, err: any): void;\n\n        /**\n         * Run hook `name` callbacks and then invoke `fn()`.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#hook\n         */\n        protected hook(name: string, fn: () => void): void;\n\n        /**\n         * Run hook `name` for the given array of `suites`\n         * in order, and callback `fn(err, errSuite)`.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#hooks\n         */\n        protected hooks(name: string, suites: Suite[], fn: (err?: any, errSuite?: Suite) => void): void;\n\n        /**\n         * Run hooks from the top level down.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#hookUp\n         */\n        protected hookUp(name: string, fn: (err?: any, errSuite?: Suite) => void): void;\n\n        /**\n         * Run hooks from the bottom up.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#hookDown\n         */\n        protected hookDown(name: string, fn: (err?: any, errSuite?: Suite) => void): void;\n\n        /**\n         * Return an array of parent Suites from closest to furthest.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#parents\n         */\n        protected parents(): Suite[];\n\n        /**\n         * Run the current test and callback `fn(err)`.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#runTest\n         */\n        protected runTest(fn: Done): any;\n\n        /**\n         * Run tests in the given `suite` and invoke the callback `fn()` when complete.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#runTests\n         */\n        protected runTests(suite: Suite, fn: (errSuite?: Suite) => void): void;\n\n        /**\n         * Run the given `suite` and invoke the callback `fn()` when complete.\n         *\n         * @see https://mochajs.org/api/Mocha.Runner.html#runSuite\n         */\n        protected runSuite(suite: Suite, fn: (errSuite?: Suite) => void): void;\n    }\n\n    // #region Runner \"waiting\" event\n    interface Runner {\n        on(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        once(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        addListener(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        removeListener(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        prependListener(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        prependOnceListener(event: \"waiting\", listener: (rootSuite: Suite) => void): this;\n        emit(name: \"waiting\", rootSuite: Suite): boolean;\n    }\n    // #endregion Runner \"waiting\" event\n    // #region Runner \"start\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"start\", listener: () => void): this;\n        once(event: \"start\", listener: () => void): this;\n        addListener(event: \"start\", listener: () => void): this;\n        removeListener(event: \"start\", listener: () => void): this;\n        prependListener(event: \"start\", listener: () => void): this;\n        prependOnceListener(event: \"start\", listener: () => void): this;\n        emit(name: \"start\"): boolean;\n    }\n    // #endregion Runner \"start\" event\n    // #region Runner \"end\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"end\", listener: () => void): this;\n        once(event: \"end\", listener: () => void): this;\n        addListener(event: \"end\", listener: () => void): this;\n        removeListener(event: \"end\", listener: () => void): this;\n        prependListener(event: \"end\", listener: () => void): this;\n        prependOnceListener(event: \"end\", listener: () => void): this;\n        emit(name: \"end\"): boolean;\n    }\n    // #endregion Runner \"end\" event\n    // #region Runner \"suite\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"suite\", listener: (suite: Suite) => void): this;\n        once(event: \"suite\", listener: (suite: Suite) => void): this;\n        addListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        removeListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        prependListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        prependOnceListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        emit(name: \"suite\", suite: Suite): boolean;\n    }\n    // #endregion Runner \"suite\" event\n    // #region Runner \"suite end\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"suite end\", listener: (suite: Suite) => void): this;\n        once(event: \"suite end\", listener: (suite: Suite) => void): this;\n        addListener(event: \"suite end\", listener: (suite: Suite) => void): this;\n        removeListener(event: \"suite end\", listener: (suite: Suite) => void): this;\n        prependListener(event: \"suite end\", listener: (suite: Suite) => void): this;\n        prependOnceListener(event: \"suite end\", listener: (suite: Suite) => void): this;\n        emit(name: \"suite end\", suite: Suite): boolean;\n    }\n    // #endregion Runner \"suite end\" event\n    // #region Runner \"test\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"test\", listener: (test: Test) => void): this;\n        once(event: \"test\", listener: (test: Test) => void): this;\n        addListener(event: \"test\", listener: (test: Test) => void): this;\n        removeListener(event: \"test\", listener: (test: Test) => void): this;\n        prependListener(event: \"test\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"test\", listener: (test: Test) => void): this;\n        emit(name: \"test\", test: Test): boolean;\n    }\n    // #endregion Runner \"test\" event\n    // #region Runner \"test end\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"test end\", listener: (test: Test) => void): this;\n        once(event: \"test end\", listener: (test: Test) => void): this;\n        addListener(event: \"test end\", listener: (test: Test) => void): this;\n        removeListener(event: \"test end\", listener: (test: Test) => void): this;\n        prependListener(event: \"test end\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"test end\", listener: (test: Test) => void): this;\n        emit(name: \"test end\", test: Test): boolean;\n    }\n    // #endregion Runner \"test end\" event\n    // #region Runner \"hook\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"hook\", listener: (hook: Hook) => void): this;\n        once(event: \"hook\", listener: (hook: Hook) => void): this;\n        addListener(event: \"hook\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"hook\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"hook\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"hook\", listener: (hook: Hook) => void): this;\n        emit(name: \"hook\", hook: Hook): boolean;\n    }\n    // #endregion Runner \"hook\" event\n    // #region Runner \"hook end\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"hook end\", listener: (hook: Hook) => void): this;\n        once(event: \"hook end\", listener: (hook: Hook) => void): this;\n        addListener(event: \"hook end\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"hook end\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"hook end\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"hook end\", listener: (hook: Hook) => void): this;\n        emit(name: \"hook end\", hook: Hook): boolean;\n    }\n    // #endregion Runner \"hook end\" event\n    // #region Runner \"pass\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"pass\", listener: (test: Test) => void): this;\n        once(event: \"pass\", listener: (test: Test) => void): this;\n        addListener(event: \"pass\", listener: (test: Test) => void): this;\n        removeListener(event: \"pass\", listener: (test: Test) => void): this;\n        prependListener(event: \"pass\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"pass\", listener: (test: Test) => void): this;\n        emit(name: \"pass\", test: Test): boolean;\n    }\n    // #endregion Runner \"pass\" event\n    // #region Runner \"fail\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        once(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        addListener(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        removeListener(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        prependListener(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        prependOnceListener(event: \"fail\", listener: (test: Test, err: any) => void): this;\n        emit(name: \"fail\", test: Test, err: any): boolean;\n    }\n    // #endregion Runner \"fail\" event\n    // #region Runner \"pending\" event\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: \"pending\", listener: (test: Test) => void): this;\n        once(event: \"pending\", listener: (test: Test) => void): this;\n        addListener(event: \"pending\", listener: (test: Test) => void): this;\n        removeListener(event: \"pending\", listener: (test: Test) => void): this;\n        prependListener(event: \"pending\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"pending\", listener: (test: Test) => void): this;\n        emit(name: \"pending\", test: Test): boolean;\n    }\n    // #endregion Runner \"pending\" event\n    // #region Runner untyped events\n    interface Runner extends NodeJS.EventEmitter {\n        on(event: string, listener: (...args: any[]) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        removeListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        emit(name: string, ...args: any[]): boolean;\n    }\n    // #endregion Runner untyped events\n\n    /**\n     * Initialize a new `Suite` with the given `title` and `ctx`.\n     *\n     * @see https://mochajs.org/api/Mocha.Suite.html\n     */\n    class Suite {\n        private _beforeEach;\n        private _beforeAll;\n        private _afterEach;\n        private _afterAll;\n        private _timeout;\n        private _enableTimeouts;\n        private _slow;\n        private _bail;\n        private _retries;\n        private _onlyTests;\n        private _onlySuites;\n\n        constructor(title: string, parentContext?: Context);\n        /** @deprecated Use the overload that accepts `Mocha.Context` instead. */\n        constructor(title: string, parentContext?: IContext);\n\n        ctx: Context;\n        suites: Suite[];\n        tests: Test[];\n        pending: boolean;\n        file?: string;\n        root: boolean;\n        delayed: boolean;\n        parent: Suite | undefined;\n        title: string;\n\n        /**\n         * Create a new `Suite` with the given `title` and parent `Suite`. When a suite\n         * with the same title is already present, that suite is returned to provide\n         * nicer reporter and more flexible meta-testing.\n         *\n         * @see https://mochajs.org/api/mocha#.exports.create\n         */\n        static create(parent: Suite, title: string): Suite;\n        /** @deprecated Use the overload that accepts `Mocha.Suite` instead. */\n        static create(parent: ISuite, title: string): Suite;\n\n        /**\n         * Return a clone of this `Suite`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#clone\n         */\n        clone(): Suite;\n\n        /**\n         * Get timeout `ms`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#timeout\n         */\n        timeout(): number;\n\n        /**\n         * Set timeout `ms` or short-hand such as \"2s\".\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#timeout\n         */\n        timeout(ms: string | number): this;\n\n        /**\n         * Get number of times to retry a failed test.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#retries\n         */\n        retries(): number;\n\n        /**\n         * Set number of times to retry a failed test.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#retries\n         */\n        retries(n: string | number): this;\n\n        /**\n         * Get whether timeouts are enabled.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#enableTimeouts\n         */\n        enableTimeouts(): boolean;\n\n        /**\n         * Set whether timeouts are `enabled`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#enableTimeouts\n         */\n        enableTimeouts(enabled: boolean): this;\n\n        /**\n         * Get slow `ms`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#slow\n         */\n        slow(): number;\n\n        /**\n         * Set slow `ms` or short-hand such as \"2s\".\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#slow\n         */\n        slow(ms: string | number): this;\n\n        /**\n         * Get whether to bail after first error.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#bail\n         */\n        bail(): boolean;\n\n        /**\n         * Set whether to bail after first error.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#bail\n         */\n        bail(bail: boolean): this;\n\n        /**\n         * Check if this suite or its parent suite is marked as pending.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#isPending\n         */\n        isPending(): boolean;\n\n        /**\n         * Run `fn(test[, done])` before running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll\n         */\n        beforeAll(fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` before running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll\n         */\n        beforeAll(fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` before running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll\n         */\n        beforeAll(title: string, fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` before running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll\n         */\n        beforeAll(title: string, fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` after running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterAll\n         */\n        afterAll(fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` after running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterAll\n         */\n        afterAll(fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` after running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterAll\n         */\n        afterAll(title: string, fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` after running tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterAll\n         */\n        afterAll(title: string, fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` before each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach\n         */\n        beforeEach(fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` before each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach\n         */\n        beforeEach(fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` before each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach\n         */\n        beforeEach(title: string, fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` before each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach\n         */\n        beforeEach(title: string, fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` after each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterEach\n         */\n        afterEach(fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` after each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterEach\n         */\n        afterEach(fn?: AsyncFunc): this;\n\n        /**\n         * Run `fn(test[, done])` after each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterEach\n         */\n        afterEach(title: string, fn?: Func): this;\n\n        /**\n         * Run `fn(test[, done])` after each test case.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#afterEach\n         */\n        afterEach(title: string, fn?: AsyncFunc): this;\n\n        /**\n         * Add a test `suite`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#addSuite\n         */\n        addSuite(suite: Suite): this;\n        /** @deprecated Use the overload that accepts `Mocha.ISuite` instead. */\n        addSuite(suite: ISuite): this;\n\n        /**\n         * Add a `test` to this suite.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#addTest\n         */\n        addTest(test: Test): this;\n        /** @deprecated Use the overload that accepts `Mocha.ITest` instead. */\n        addTest(test: ITest): this;\n\n        /**\n         * Return the full title generated by recursively concatenating the parent's\n         * full title.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#.Suite#fullTitle\n         */\n        fullTitle(): string;\n\n        /**\n         * Return the title path generated by recursively concatenating the parent's\n         * title path.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#.Suite#titlePath\n         */\n        titlePath(): string[];\n\n        /**\n         * Return the total number of tests.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#.Suite#total\n         */\n        total(): number;\n\n        /**\n         * Iterates through each suite recursively to find all tests. Applies a\n         * function in the format `fn(test)`.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#eachTest\n         */\n        eachTest(fn: (test: Test) => void): this;\n\n        /**\n         * This will run the root suite if we happen to be running in delayed mode.\n         *\n         * @see https://mochajs.org/api/Mocha.Suite.html#run\n         */\n        run(): void;\n\n        /**\n         * Generic hook-creator.\n         */\n        protected _createHook(title: string, fn?: Func | AsyncFunc): Hook;\n    }\n\n    // #region Suite \"beforeAll\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        once(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        addListener(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"beforeAll\", listener: (hook: Hook) => void): this;\n        emit(name: \"beforeAll\", hook: Hook): boolean;\n    }\n    // #endregion Suite \"beforeAll\" event\n    // #region Suite \"afterAll\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        once(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        addListener(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"afterAll\", listener: (hook: Hook) => void): this;\n        emit(name: \"afterAll\", hook: Hook): boolean;\n    }\n    // #endregion Suite \"afterAll\" event\n    // #region Suite \"beforeEach\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        once(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        addListener(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"beforeEach\", listener: (hook: Hook) => void): this;\n        emit(name: \"beforeEach\", hook: Hook): boolean;\n    }\n    // #endregion Suite \"beforeEach\" event\n    // #region Suite \"afterEach\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        once(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        addListener(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        removeListener(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        prependListener(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        prependOnceListener(event: \"afterEach\", listener: (hook: Hook) => void): this;\n        emit(name: \"afterEach\", hook: Hook): boolean;\n    }\n    // #endregion Suite \"afterEach\" event\n    // #region Suite \"suite\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"suite\", listener: (suite: Suite) => void): this;\n        once(event: \"suite\", listener: (suite: Suite) => void): this;\n        addListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        removeListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        prependListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        prependOnceListener(event: \"suite\", listener: (suite: Suite) => void): this;\n        emit(name: \"suite\", suite: Suite): boolean;\n    }\n    // #endregion Suite \"suite\" event\n    // #region Suite \"test\" event\n    interface Suite {\n        on(event: \"test\", listener: (test: Test) => void): this;\n        once(event: \"test\", listener: (test: Test) => void): this;\n        addListener(event: \"test\", listener: (test: Test) => void): this;\n        removeListener(event: \"test\", listener: (test: Test) => void): this;\n        prependListener(event: \"test\", listener: (test: Test) => void): this;\n        prependOnceListener(event: \"test\", listener: (test: Test) => void): this;\n        emit(name: \"test\", test: Test): boolean;\n    }\n    // #endregion Suite \"test\" event\n    // #region Suite \"run\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"run\", listener: () => void): this;\n        once(event: \"run\", listener: () => void): this;\n        addListener(event: \"run\", listener: () => void): this;\n        removeListener(event: \"run\", listener: () => void): this;\n        prependListener(event: \"run\", listener: () => void): this;\n        prependOnceListener(event: \"run\", listener: () => void): this;\n        emit(name: \"run\"): boolean;\n    }\n    // #endregion Suite \"run\" event\n    // #region Suite \"pre-require\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        once(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        addListener(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        removeListener(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        prependListener(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        prependOnceListener(event: \"pre-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        emit(name: \"pre-require\", context: MochaGlobals, file: string, mocha: Mocha): boolean;\n    }\n    // #endregion Suite \"pre-require\" event\n    // #region Suite \"require\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        once(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        addListener(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        removeListener(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        prependListener(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        prependOnceListener(event: \"require\", listener: (module: any, file: string, mocha: Mocha) => void): this;\n        emit(name: \"require\", module: any, file: string, mocha: Mocha): boolean;\n    }\n    // #endregion Suite \"require\" event\n    // #region Suite \"post-require\" event\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        once(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        addListener(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        removeListener(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        prependListener(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        prependOnceListener(event: \"post-require\", listener: (context: MochaGlobals, file: string, mocha: Mocha) => void): this;\n        emit(name: \"post-require\", context: MochaGlobals, file: string, mocha: Mocha): boolean;\n    }\n    // #endregion Suite \"post-require\" event\n    // #region Suite untyped events\n    interface Suite extends NodeJS.EventEmitter {\n        on(event: string, listener: (...args: any[]) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        removeListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        emit(name: string, ...args: any[]): boolean;\n    }\n    // #endregion Runner untyped events\n\n    /**\n     * Initialize a new `Hook` with the given `title` and callback `fn`\n     *\n     * @see https://mochajs.org/api/Hook.html\n     */\n    class Hook extends Runnable {\n        private _error;\n\n        type: \"hook\";\n        originalTitle?: string; // added by Runner\n\n        /**\n         * Get the test `err`.\n         *\n         * @see https://mochajs.org/api/Hook.html#error\n         */\n        error(): any;\n\n        /**\n         * Set the test `err`.\n         *\n         * @see https://mochajs.org/api/Hook.html#error\n         */\n        error(err: any): void;\n    }\n\n    /**\n     * Initialize a new `Test` with the given `title` and callback `fn`.\n     *\n     * @see https://mochajs.org/api/Test.html\n     */\n    class Test extends Runnable {\n        type: \"test\";\n        speed?: \"slow\" | \"medium\" | \"fast\"; // added by reporters\n        err?: Error; // added by reporters\n        clone(): Test;\n    }\n\n    /**\n     * Test statistics\n     */\n    interface Stats {\n        suites: number;\n        tests: number;\n        passes: number;\n        pending: number;\n        failures: number;\n        start?: Date;\n        end?: Date;\n        duration?: number;\n    }\n\n    type TestInterface = (suite: Suite) => void;\n\n    interface ReporterConstructor {\n        new (runner: Runner, options: MochaOptions): reporters.Base;\n    }\n\n    type Done = (err?: any) => void;\n\n    /**\n     * Callback function used for tests and hooks.\n     */\n    type Func = (this: Context, done: Done) => void;\n\n    /**\n     * Async callback function used for tests and hooks.\n     */\n    type AsyncFunc = (this: Context) => PromiseLike<any>;\n\n    /**\n     * Options to pass to Mocha.\n     */\n    interface MochaOptions {\n        /** Test interfaces (\"bdd\", \"tdd\", \"exports\", etc.). */\n        ui?: Interface;\n\n        /**\n         * Reporter constructor, built-in reporter name, or reporter module path. Defaults to\n         * `\"spec\"`.\n         */\n        reporter?: string | ReporterConstructor;\n\n        /** Options to pass to the reporter. */\n        reporterOptions?: any;\n\n        /** Array of accepted globals. */\n        globals?: string[];\n\n        /** timeout in milliseconds. */\n        timeout?: number;\n\n        enableTimeouts?: boolean;\n\n        /** number of times to retry failed tests. */\n        retries?: number;\n\n        /** bail on the first test failure. */\n        bail?: boolean;\n\n        /** milliseconds to wait before considering a test slow. */\n        slow?: number;\n\n        /** ignore global leaks. */\n        ignoreLeaks?: boolean;\n\n        /** display the full stack trace on failure. */\n        fullStackTrace?: boolean;\n\n        /** string or regexp to filter tests with. */\n        grep?: string | RegExp;\n\n        /** Enable growl support. */\n        growl?: boolean;\n\n        /** Emit color output. */\n        useColors?: boolean;\n\n        /** Use inline diffs rather than +/-. */\n        inlineDiffs?: boolean;\n\n        /** Do not show diffs at all. */\n        hideDiff?: boolean;\n\n        asyncOnly?: boolean;\n        delay?: boolean;\n        forbidOnly?: boolean;\n        forbidPending?: boolean;\n        noHighlighting?: boolean;\n        allowUncaught?: boolean;\n    }\n\n    interface MochaInstanceOptions extends MochaOptions {\n        files?: string[];\n    }\n\n    /**\n     * Variables added to the global scope by Mocha when run in the CLI.\n     */\n    interface MochaGlobals {\n        /**\n         * Execute before running tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#before\n         */\n        before: HookFunction;\n\n        /**\n         * Execute after running tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#after\n         */\n        after: HookFunction;\n\n        /**\n         * Execute before each test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#beforeEach\n         */\n        beforeEach: HookFunction;\n\n        /**\n         * Execute after each test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#afterEach\n         */\n        afterEach: HookFunction;\n\n        /**\n         * Describe a \"suite\" containing nested suites and tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        describe: SuiteFunction;\n\n        /**\n         * Describe a \"suite\" containing nested suites and tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        context: SuiteFunction;\n\n        /**\n         * Pending suite.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        xdescribe: PendingSuiteFunction;\n\n        /**\n         * Pending suite.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        xcontext: PendingSuiteFunction;\n\n        /**\n         * Describes a test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        it: TestFunction;\n\n        /**\n         * Describes a test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        specify: TestFunction;\n\n        /**\n         * Describes a pending test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        xit: PendingTestFunction;\n\n        /**\n         * Describes a pending test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        xspecify: PendingTestFunction;\n\n        /**\n         * Execute before running tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#before\n         */\n        suiteSetup: HookFunction;\n\n        /**\n         * Execute after running tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#after\n         */\n        suiteTeardown: HookFunction;\n\n        /**\n         * Execute before each test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#beforeEach\n         */\n        setup: HookFunction;\n\n        /**\n         * Execute after each test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         *\n         * @see https://mochajs.org/api/global.html#afterEach\n         */\n        teardown: HookFunction;\n\n        /**\n         * Describe a \"suite\" containing nested suites and tests.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        suite: SuiteFunction;\n\n        /**\n         * Describes a test case.\n         *\n         * - _Only available when invoked via the mocha CLI._\n         */\n        test: TestFunction;\n\n        run: typeof run;\n    }\n\n    /**\n     * Third-party declarations that want to add new entries to the `Reporter` union can\n     * contribute names here.\n     */\n    interface ReporterContributions {\n        Base: never;\n        base: never;\n        Dot: never;\n        dot: never;\n        TAP: never;\n        tap: never;\n        JSON: never;\n        json: never;\n        HTML: never;\n        html: never;\n        List: never;\n        list: never;\n        Min: never;\n        min: never;\n        Spec: never;\n        spec: never;\n        Nyan: never;\n        nyan: never;\n        XUnit: never;\n        xunit: never;\n        Markdown: never;\n        markdown: never;\n        Progress: never;\n        progress: never;\n        Landing: never;\n        landing: never;\n        JSONStream: never;\n        \"json-stream\": never;\n    }\n\n    type Reporter = keyof ReporterContributions;\n\n    /**\n     * Third-party declarations that want to add new entries to the `Interface` union can\n     * contribute names here.\n     */\n    interface InterfaceContributions {\n        bdd: never;\n        tdd: never;\n        qunit: never;\n        exports: never;\n    }\n\n    type Interface = keyof InterfaceContributions;\n\n    // #region Deprecations\n\n    /** @deprecated use `Mocha.Context` instead. */\n    interface IContext {\n        test?: IRunnable;\n        runnable(): IRunnable | undefined;\n        /** @deprecated `.runnable()` returns `this` in `Mocha.Context`. */\n        runnable(runnable: IRunnable): IContext;\n        timeout(): number;\n        /** @deprecated `.timeout()` returns `this` in `Mocha.Context`. */\n        timeout(timeout: number): IContext;\n        /** @deprecated `.enableTimeouts()` has additional overloads in `Mocha.Context`. */\n        /** @deprecated `.enableTimeouts()` returns `this` in `Mocha.Context`. */\n        enableTimeouts(enableTimeouts: boolean): IContext;\n        /** @deprecated `.slow()` has additional overloads in `Mocha.Context`. */\n        /** @deprecated `.slow()` returns `this` in `Mocha.Context`. */\n        slow(slow: number): IContext;\n        /** @deprecated `.skip()` returns `never` in `Mocha.Context`. */\n        skip(): IContext;\n        retries(): number;\n        /** @deprecated `.retries()` returns `this` in `Mocha.Context`. */\n        retries(retries: number): IContext;\n    }\n\n    /** @deprecated use `Mocha.Suite` instead. */\n    interface ISuiteCallbackContext {\n        /** @deprecated `.timeout()` has additional overloads in `Mocha.Suite`. */\n        timeout(ms: number | string): this;\n        /** @deprecated `.retries()` has additional overloads in `Mocha.Suite`. */\n        retries(n: number): this;\n        /** @deprecated `.slow()` has additional overloads in `Mocha.Suite`. */\n        slow(ms: number): this;\n    }\n\n    /** @deprecated use `Mocha.Context` instead. */\n    interface IHookCallbackContext {\n        /** @deprecated `.skip()` returns `never` in `Mocha.Context`. */\n        skip(): this;\n        /** @deprecated `.timeout()` has additional overloads in `Mocha.Context`. */\n        timeout(ms: number | string): this;\n        [index: string]: any;\n    }\n\n    /** @deprecated use `Mocha.Context` instead. */\n    interface ITestCallbackContext {\n        /** @deprecated `.skip()` returns `never` in `Mocha.Context`. */\n        skip(): this;\n        /** @deprecated `.timeout()` has additional overloads in `Mocha.Context`. */\n        timeout(ms: number | string): this;\n        /** @deprecated `.retries()` has additional overloads in `Mocha.Context`. */\n        retries(n: number): this;\n        /** @deprecated `.slow()` has additional overloads in `Mocha.Context`. */\n        slow(ms: number): this;\n        [index: string]: any;\n    }\n\n    /** Partial interface for Mocha's `Runnable` class. */\n    /** @deprecated use `Mocha.Runnable` instead. */\n    interface IRunnable extends NodeJS.EventEmitter {\n        title: string;\n        /** @deprecated `.fn` has type `Func | AsyncFunc` in `Mocha.Runnable`. */\n        fn: Function | undefined;\n        async: boolean;\n        sync: boolean;\n        timedOut: boolean;\n        /** @deprecated `.timeout()` has additional overloads in `Mocha.Runnable`. */\n        timeout(n: number | string): this;\n        duration?: number;\n    }\n\n    /** Partial interface for Mocha's `Suite` class. */\n    /** @deprecated use `Mocha.Suite` instead. */\n    interface ISuite {\n        /** @deprecated `.ctx` has type `Mocha.Context` in `Mocha.Suite`. */\n        ctx: IContext;\n        /** @deprecated `.parent` has type `Mocha.Suite | undefined` in `Mocha.Suite`. */\n        parent: ISuite | undefined;\n        root: boolean;\n        title: string;\n        /** @deprecated `.suites` has type `Mocha.Suite[]` in `Mocha.Suite`. */\n        suites: ISuite[];\n        /** @deprecated `.tests` has type `Mocha.Test[]` in `Mocha.Suite`. */\n        tests: ITest[];\n\n        bail(): boolean;\n        /** @deprecated `.bail()` returns `this` in `Mocha.Suite`. */\n        bail(bail: boolean): ISuite;\n        fullTitle(): string;\n        retries(): number;\n        /** @deprecated `.retries()` returns `this` in `Mocha.Suite`. */\n        retries(retries: number): ISuite;\n        slow(): number;\n        /** @deprecated `.slow()` returns `this` in `Mocha.Suite`. */\n        slow(slow: number): ISuite;\n        timeout(): number;\n        /** @deprecated `.timeout()` returns `this` in `Mocha.Suite`. */\n        timeout(timeout: number): ISuite;\n    }\n\n    /** Partial interface for Mocha's `Test` class. */\n    /** @deprecated use `Mocha.Test` instead. */\n    interface ITest extends IRunnable {\n        body?: string;\n        file?: string;\n        /** @deprecated `.parent` has type `Mocha.Suite | undefined` in `Mocha.Test`. */\n        parent?: ISuite;\n        pending: boolean;\n        state?: 'failed' | 'passed';\n        type: 'test';\n        fullTitle(): string;\n    }\n\n    /** @deprecated use `Mocha.Hook` instead. */\n    interface IHook extends IRunnable {\n        /** @deprecated `.ctx` has type `Mocha.Context` in `Mocha.Runnable`. */\n        ctx?: IContext;\n        /** @deprecated `.parent` has type `Mocha.Suite` in `Mocha.Runnable`. */\n        parent?: ISuite;\n        type: 'hook';\n        /** @deprecated `.error()` has additional overloads in `Mocha.Hook`. */\n        error(err: Error): void;\n    }\n\n    /** @deprecated use `Mocha.Context` instead. */\n    interface IBeforeAndAfterContext extends IHookCallbackContext {\n        /** @deprecated `.currentTest` has type `Mocha.Test` in `Mocha.Context`. */\n        currentTest?: ITest;\n    }\n\n    /** @deprecated use `Mocha.Stats` instead. */\n    type IStats = Stats;\n\n    /** Partial interface for Mocha's `Runner` class. */\n    /** @deprecated use `Mocha.Runner` instead. */\n    interface IRunner extends NodeJS.EventEmitter {\n        asyncOnly?: boolean;\n        stats?: IStats;\n        started: boolean;\n        /** @deprecated `.suite` has type `Mocha.Suite` in `Mocha.Runner`. */\n        suite: ISuite;\n        total: number;\n        failures: number;\n        forbidOnly?: boolean;\n        forbidPending?: boolean;\n        fullStackTrace?: boolean;\n        ignoreLeaks?: boolean;\n        grep(re: RegExp, invert: boolean): this;\n        /** @deprecated Parameter `suite` has type `Mocha.Suite` in `Mocha.Runner`. */\n        grepTotal(suite: ISuite): number;\n        /** @deprecated `.globals()` has different overloads in `Mocha.Runner`. */\n        globals(arr: ReadonlyArray<string>): this | string[];\n        abort(): this;\n        run(fn?: (failures: number) => void): this;\n    }\n\n    /** @deprecated use `Mocha.SuiteFunction` instead. */\n    interface IContextDefinition {\n        /** @deprecated use `Mocha.SuiteFunction` instead. */\n        (description: string, callback: (this: ISuiteCallbackContext) => void): ISuite;\n        /** @deprecated use `Mocha.SuiteFunction` instead. */\n        only(description: string, callback: (this: ISuiteCallbackContext) => void): ISuite;\n        /** @deprecated use `Mocha.SuiteFunction` instead. */\n        skip(description: string, callback: (this: ISuiteCallbackContext) => void): void;\n    }\n\n    /** @deprecated use `Mocha.TestFunction` instead. */\n    interface ITestDefinition {\n        /** @deprecated use `Mocha.TestFunction` instead. */\n        /** @deprecated `Mocha.TestFunction` does not allow mixing `done` with a return type of `PromiseLike<any>`. */\n        (expectation: string, callback?: (this: ITestCallbackContext, done: MochaDone) => PromiseLike<any> | void): ITest;\n        /** @deprecated use `Mocha.TestFunction` instead. */\n        /** @deprecated `Mocha.TestFunction#only` does not allow mixing `done` with a return type of `PromiseLike<any>`. */\n        only(expectation: string, callback?: (this: ITestCallbackContext, done: MochaDone) => PromiseLike<any> | void): ITest;\n        /** @deprecated use `Mocha.TestFunction` instead. */\n        /** @deprecated `Mocha.TestFunction#skip` does not allow mixing `done` with a return type of `PromiseLike<any>`. */\n        skip(expectation: string, callback?: (this: ITestCallbackContext, done: MochaDone) => PromiseLike<any> | void): void;\n    }\n\n    // #endregion\n}\n\n// #region Test interface augmentations\n\n/**\n * Triggers root suite execution.\n *\n * - _Only available if flag --delay is passed into Mocha._\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#runWithSuite\n */\ndeclare function run(): void;\n\n/**\n * Execute before running tests.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#before\n */\ndeclare var before: Mocha.HookFunction;\n\n/**\n * Execute before running tests.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#before\n */\ndeclare var suiteSetup: Mocha.HookFunction;\n\n/**\n * Execute after running tests.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#after\n */\ndeclare var after: Mocha.HookFunction;\n\n/**\n * Execute after running tests.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#after\n */\ndeclare var suiteTeardown: Mocha.HookFunction;\n\n/**\n * Execute before each test case.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#beforeEach\n */\ndeclare var beforeEach: Mocha.HookFunction;\n\n/**\n * Execute before each test case.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#beforeEach\n */\ndeclare var setup: Mocha.HookFunction;\n\n/**\n * Execute after each test case.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#afterEach\n */\ndeclare var afterEach: Mocha.HookFunction;\n\n/**\n * Execute after each test case.\n *\n * - _Only available when invoked via the mocha CLI._\n *\n * @see https://mochajs.org/api/global.html#afterEach\n */\ndeclare var teardown: Mocha.HookFunction;\n\n/**\n * Describe a \"suite\" containing nested suites and tests.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var describe: Mocha.SuiteFunction;\n\n/**\n * Describe a \"suite\" containing nested suites and tests.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var context: Mocha.SuiteFunction;\n\n/**\n * Describe a \"suite\" containing nested suites and tests.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var suite: Mocha.SuiteFunction;\n\n/**\n * Pending suite.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var xdescribe: Mocha.PendingSuiteFunction;\n\n/**\n * Pending suite.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var xcontext: Mocha.PendingSuiteFunction;\n\n/**\n * Describes a test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var it: Mocha.TestFunction;\n\n/**\n * Describes a test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var specify: Mocha.TestFunction;\n\n/**\n * Describes a test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var test: Mocha.TestFunction;\n\n/**\n * Describes a pending test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var xit: Mocha.PendingTestFunction;\n\n/**\n * Describes a pending test case.\n *\n * - _Only available when invoked via the mocha CLI._\n */\ndeclare var xspecify: Mocha.PendingTestFunction;\n\n// #endregion Test interface augmentations\n\n// #region Reporter augmentations\n\n// Forward declaration for `HTMLLIElement` from lib.dom.d.ts.\n// Required by Mocha.reporters.HTML.\n// NOTE: Mocha *must not* have a direct dependency on DOM types.\n// tslint:disable-next-line no-empty-interface\ninterface HTMLLIElement { }\n\n// Augments the DOM `Window` object when lib.dom.d.ts is loaded.\n// tslint:disable-next-line no-empty-interface\ninterface Window extends Mocha.MochaGlobals { }\n\ndeclare namespace NodeJS {\n    // Forward declaration for `NodeJS.EventEmitter` from node.d.ts.\n    // Required by Mocha.Runnable, Mocha.Runner, and Mocha.Suite.\n    // NOTE: Mocha *must not* have a direct dependency on @types/node.\n    // tslint:disable-next-line no-empty-interface\n    interface EventEmitter { }\n\n    // Augments NodeJS's `global` object when node.d.ts is loaded\n    // tslint:disable-next-line no-empty-interface\n    interface Global extends Mocha.MochaGlobals { }\n}\n\n// #endregion Reporter augmentations\n\n// #region Browser augmentations\n\n/**\n * Mocha global.\n *\n * - _Only supported in the browser._\n */\ndeclare const mocha: BrowserMocha;\n\ninterface BrowserMocha extends Mocha {\n    /**\n     * Function to allow assertion libraries to throw errors directly into mocha.\n     * This is useful when running tests in a browser because window.onerror will\n     * only receive the 'message' attribute of the Error.\n     *\n     * - _Only supported in the browser._\n     */\n    throwError(err: any): never;\n\n    /**\n     * Setup mocha with the given settings options.\n     *\n     * - _Only supported in the browser._\n     */\n    setup(opts?: Mocha.Interface | MochaSetupOptions): this;\n}\n\n/**\n * Options to pass to `mocha.setup` in the browser.\n */\ninterface MochaSetupOptions extends Mocha.MochaOptions {\n    /** @deprecated This is not used by Mocha. Use `files` instead. */\n    require?: string[];\n    fullTrace?: boolean;\n}\n\n// #endregion Browser augmentations\n\n// #region Deprecations\n\n/** @deprecated use `Mocha.Done` instead. */\ntype MochaDone = Mocha.Done;\n\n/** @deprecated use `Mocha.ReporterConstructor` instead. */\ntype ReporterConstructor = Mocha.ReporterConstructor;\n\n// #endregion Deprecations\n\ndeclare module \"mocha\" {\n    export = Mocha;\n}\n\ndeclare module \"mocha/lib/ms\" {\n    export = milliseconds;\n    /**\n     * Parse the given `str` and return milliseconds.\n     *\n     * @see {@link https://mochajs.org/api/module-milliseconds.html}\n     * @see {@link https://mochajs.org/api/module-milliseconds.html#~parse}\n     */\n    function milliseconds(val: string): number;\n\n    /**\n     * Format for `ms`.\n     *\n     * @see {@link https://mochajs.org/api/module-milliseconds.html}\n     * @see {@link https://mochajs.org/api/module-milliseconds.html#~format}\n     */\n    function milliseconds(val: number): string;\n}\n\ndeclare module \"mocha/lib/interfaces/common\" {\n    export = common;\n\n    function common(suites: Mocha.Suite[], context: Mocha.MochaGlobals, mocha: Mocha): common.CommonFunctions;\n\n    namespace common {\n        interface CommonFunctions {\n            /**\n             * This is only present if flag --delay is passed into Mocha. It triggers\n             * root suite execution.\n             */\n            runWithSuite(suite: Mocha.Suite): () => void;\n\n            /**\n             * Execute before running tests.\n             */\n            before(fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute before running tests.\n             */\n            before(name: string, fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute after running tests.\n             */\n            after(fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute after running tests.\n             */\n            after(name: string, fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute before each test case.\n             */\n            beforeEach(fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute before each test case.\n             */\n            beforeEach(name: string, fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute after each test case.\n             */\n            afterEach(fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            /**\n             * Execute after each test case.\n             */\n            afterEach(name: string, fn?: Mocha.Func | Mocha.AsyncFunc): void;\n\n            suite: SuiteFunctions;\n            test: TestFunctions;\n        }\n\n        interface CreateOptions {\n            /** Title of suite */\n            title: string;\n\n            /** Suite function */\n            fn?: (this: Mocha.Suite) => void;\n\n            /** Is suite pending? */\n            pending?: boolean;\n\n            /** Filepath where this Suite resides */\n            file?: string;\n\n            /** Is suite exclusive? */\n            isOnly?: boolean;\n        }\n\n        interface SuiteFunctions {\n            /**\n             * Create an exclusive Suite; convenience function\n             */\n            only(opts: CreateOptions): Mocha.Suite;\n\n            /**\n             * Create a Suite, but skip it; convenience function\n             */\n            skip(opts: CreateOptions): Mocha.Suite;\n\n            /**\n             * Creates a suite.\n             */\n            create(opts: CreateOptions): Mocha.Suite;\n        }\n\n        interface TestFunctions {\n            /**\n             * Exclusive test-case.\n             */\n            only(mocha: Mocha, test: Mocha.Test): Mocha.Test;\n\n            /**\n             * Pending test case.\n             */\n            skip(title: string): void;\n\n            /**\n             * Number of retry attempts\n             */\n            retries(n: number): void;\n        }\n    }\n}\n\n// Type definitions for chai 4.2\n// Project: http://chaijs.com/\n// Definitions by: Jed Mao <https://github.com/jedmao>,\n//                 Bart van der Schoor <https://github.com/Bartvds>,\n//                 Andrew Brown <https://github.com/AGBrown>,\n//                 Olivier Chevet <https://github.com/olivr70>,\n//                 Matt Wistrand <https://github.com/mwistrand>,\n//                 Josh Goldberg <https://github.com/joshuakgoldberg>\n//                 Shaun Luttin <https://github.com/shaunluttin>\n//                 Gintautas Miselis <https://github.com/Naktibalda>\n//                 Satana Charuwichitratana <https://github.com/micksatana>\n//                 Erik Schierboom <https://github.com/ErikSchierboom>\n//                 Rebecca Turner <https://github.com/9999years>\n//                 Bogdan Paranytsia <https://github.com/bparan>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\ndeclare namespace Chai {\n    type Message = string | (() => string);\n    type ObjectProperty = string | symbol | number;\n\n    interface PathInfo {\n        parent: object;\n        name: string;\n        value?: any;\n        exists: boolean;\n    }\n\n    interface ErrorConstructor {\n        new(...args: any[]): Error;\n    }\n\n    interface ChaiUtils {\n        addChainableMethod(\n            // object to define the method on, e.g. chai.Assertion.prototype\n            ctx: object,\n            // method name\n            name: string,\n            // method itself; any arguments\n            method: (...args: any[]) => void,\n            // called when property is accessed\n            chainingBehavior?: () => void\n        ): void;\n        overwriteChainableMethod(\n            ctx: object,\n            name: string,\n            method: (...args: any[]) => void,\n            chainingBehavior?: () => void\n        ): void;\n        addLengthGuard(\n            fn: Function,\n            assertionName: string,\n            isChainable: boolean\n        ): void;\n        addMethod(ctx: object, name: string, method: Function): void;\n        addProperty(ctx: object, name: string, getter: () => any): void;\n        overwriteMethod(ctx: object, name: string, method: Function): void;\n        overwriteProperty(ctx: object, name: string, getter: () => any): void;\n        compareByInspect(a: object, b: object): -1 | 1;\n        expectTypes(obj: object, types: string[]): void;\n        flag(obj: object, key: string, value?: any): any;\n        getActual(obj: object, args: AssertionArgs): any;\n        getProperties(obj: object): string[];\n        getEnumerableProperties(obj: object): string[];\n        getOwnEnumerablePropertySymbols(obj: object): symbol[];\n        getOwnEnumerableProperties(obj: object): Array<string | symbol>;\n        getMessage(errorLike: Error | string): string;\n        getMessage(obj: any, args: AssertionArgs): string;\n        inspect(obj: any, showHidden?: boolean, depth?: number, colors?: boolean): void;\n        isProxyEnabled(): boolean;\n        objDisplay(obj: object): void;\n        proxify(obj: object, nonChainableMethodName: string): object;\n        test(obj: object, args: AssertionArgs): boolean;\n        transferFlags(assertion: Assertion, obj: object, includeAll?: boolean): void;\n        compatibleInstance(thrown: Error, errorLike: Error | ErrorConstructor): boolean;\n        compatibleConstructor(thrown: Error, errorLike: Error | ErrorConstructor): boolean;\n        compatibleMessage(thrown: Error, errMatcher: string | RegExp): boolean;\n        getConstructorName(constructorFn: Function): string;\n        getFuncName(constructorFn: Function): string | null;\n\n        // Reexports from pathval:\n        hasProperty(obj: object | undefined | null, name: ObjectProperty): boolean;\n        getPathInfo(obj: object, path: string): PathInfo;\n        getPathValue(obj: object, path: string): object | undefined;\n    }\n\n    type ChaiPlugin = (chai: ChaiStatic, utils: ChaiUtils) => void;\n\n    interface ChaiStatic {\n        expect: ExpectStatic;\n        should(): Should;\n        /**\n         * Provides a way to extend the internals of Chai\n         */\n        use(fn: ChaiPlugin): ChaiStatic;\n        util: ChaiUtils;\n        assert: AssertStatic;\n        config: Config;\n        Assertion: AssertionStatic;\n        AssertionError: typeof AssertionError;\n        version: string;\n    }\n\n    export interface ExpectStatic {\n        (val: any, message?: string): Assertion;\n        fail(actual?: any, expected?: any, message?: string, operator?: Operator): void;\n    }\n\n    export interface AssertStatic extends Assert {\n    }\n\n    // chai.Assertion.prototype.assert arguments\n    type AssertionArgs = [\n        // 'expression to be tested'\n        // This parameter is unused and the docs list its type as\n        // 'Philosophical', which is mentioned nowhere else in the source. Do\n        // with that what you will!\n        any,\n        Message, // message if value fails\n        Message, // message if negated value fails\n        any, // expected value\n        any?, // actual value\n        boolean? // showDiff\n    ];\n\n    export interface AssertionPrototype {\n        assert(...args: AssertionArgs): void;\n        _obj: any;\n    }\n\n    export interface AssertionStatic extends AssertionPrototype {\n        prototype: AssertionPrototype;\n\n        new (target: any, message?: string, ssfi?: Function, lockSsfi?: boolean): Assertion;\n\n        // Deprecated properties:\n        includeStack: boolean;\n        showDiff: boolean;\n\n        // Partials of functions on ChaiUtils:\n        addProperty(name: string, getter: (this: AssertionStatic) => any): void;\n        addMethod(name: string, method: (this: AssertionStatic, ...args: any[]) => any): void;\n        addChainableMethod(\n            name: string,\n            method: (this: AssertionStatic, ...args: any[]) => void,\n            chainingBehavior?: () => void\n        ): void;\n        overwriteProperty(name: string, getter: (this: AssertionStatic) => any): void;\n        overwriteMethod(name: string, method: (this: AssertionStatic, ...args: any[]) => any): void;\n        overwriteChainableMethod(\n            name: string,\n            method: (this: AssertionStatic, ...args: any[]) => void,\n            chainingBehavior?: () => void\n        ): void;\n    }\n\n    export type Operator = string; // \"==\" | \"===\" | \">\" | \">=\" | \"<\" | \"<=\" | \"!=\" | \"!==\";\n\n    export type OperatorComparable = boolean | null | number | string | undefined | Date;\n\n    interface ShouldAssertion {\n        equal(value1: any, value2: any, message?: string): void;\n        Throw: ShouldThrow;\n        throw: ShouldThrow;\n        exist(value: any, message?: string): void;\n    }\n\n    interface Should extends ShouldAssertion {\n        not: ShouldAssertion;\n        fail(actual: any, expected: any, message?: string, operator?: Operator): void;\n    }\n\n    interface ShouldThrow {\n        (actual: Function, expected?: string|RegExp, message?: string): void;\n        (actual: Function, constructor: Error|Function, expected?: string|RegExp, message?: string): void;\n    }\n\n    interface Assertion extends LanguageChains, NumericComparison, TypeComparison {\n        not: Assertion;\n        deep: Deep;\n        ordered: Ordered;\n        nested: Nested;\n        own: Own;\n        any: KeyFilter;\n        all: KeyFilter;\n        a: TypeComparison;\n        an: TypeComparison;\n        include: Include;\n        includes: Include;\n        contain: Include;\n        contains: Include;\n        ok: Assertion;\n        true: Assertion;\n        false: Assertion;\n        null: Assertion;\n        undefined: Assertion;\n        NaN: Assertion;\n        exist: Assertion;\n        empty: Assertion;\n        arguments: Assertion;\n        Arguments: Assertion;\n        equal: Equal;\n        equals: Equal;\n        eq: Equal;\n        eql: Equal;\n        eqls: Equal;\n        property: Property;\n        ownProperty: Property;\n        haveOwnProperty: Property;\n        ownPropertyDescriptor: OwnPropertyDescriptor;\n        haveOwnPropertyDescriptor: OwnPropertyDescriptor;\n        length: Length;\n        lengthOf: Length;\n        match: Match;\n        matches: Match;\n        string(string: string, message?: string): Assertion;\n        keys: Keys;\n        key(string: string): Assertion;\n        throw: Throw;\n        throws: Throw;\n        Throw: Throw;\n        respondTo: RespondTo;\n        respondsTo: RespondTo;\n        itself: Assertion;\n        satisfy: Satisfy;\n        satisfies: Satisfy;\n        closeTo: CloseTo;\n        approximately: CloseTo;\n        members: Members;\n        increase: PropertyChange;\n        increases: PropertyChange;\n        decrease: PropertyChange;\n        decreases: PropertyChange;\n        change: PropertyChange;\n        changes: PropertyChange;\n        extensible: Assertion;\n        sealed: Assertion;\n        frozen: Assertion;\n        oneOf(list: ReadonlyArray<any>, message?: string): Assertion;\n    }\n\n    interface LanguageChains {\n        to: Assertion;\n        be: Assertion;\n        been: Assertion;\n        is: Assertion;\n        that: Assertion;\n        which: Assertion;\n        and: Assertion;\n        has: Assertion;\n        have: Assertion;\n        with: Assertion;\n        at: Assertion;\n        of: Assertion;\n        same: Assertion;\n        but: Assertion;\n        does: Assertion;\n    }\n\n    interface NumericComparison {\n        above: NumberComparer;\n        gt: NumberComparer;\n        greaterThan: NumberComparer;\n        least: NumberComparer;\n        gte: NumberComparer;\n        below: NumberComparer;\n        lt: NumberComparer;\n        lessThan: NumberComparer;\n        most: NumberComparer;\n        lte: NumberComparer;\n        within(start: number, finish: number, message?: string): Assertion;\n        within(start: Date, finish: Date, message?: string): Assertion;\n    }\n\n    interface NumberComparer {\n        (value: number | Date, message?: string): Assertion;\n    }\n\n    interface TypeComparison {\n        (type: string, message?: string): Assertion;\n        instanceof: InstanceOf;\n        instanceOf: InstanceOf;\n    }\n\n    interface InstanceOf {\n        (constructor: any, message?: string): Assertion;\n    }\n\n    interface CloseTo {\n        (expected: number, delta: number, message?: string): Assertion;\n    }\n\n    interface Nested {\n        include: Include;\n        includes: Include;\n        contain: Include;\n        contains: Include;\n        property: Property;\n        members: Members;\n    }\n\n    interface Own {\n        include: Include;\n        includes: Include;\n        contain: Include;\n        contains: Include;\n        property: Property;\n    }\n\n    interface Deep {\n        equal: Equal;\n        equals: Equal;\n        eq: Equal;\n        include: Include;\n        includes: Include;\n        contain: Include;\n        contains: Include;\n        property: Property;\n        members: Members;\n        ordered: Ordered;\n        nested: Nested;\n        own: Own;\n    }\n\n    interface Ordered {\n        members: Members;\n    }\n\n    interface KeyFilter {\n        keys: Keys;\n        members: Members;\n    }\n\n    interface Equal {\n        (value: any, message?: string): Assertion;\n    }\n\n    interface Property {\n        (name: string, value: any, message?: string): Assertion;\n        (name: string, message?: string): Assertion;\n    }\n\n    interface OwnPropertyDescriptor {\n        (name: string, descriptor: PropertyDescriptor, message?: string): Assertion;\n        (name: string, message?: string): Assertion;\n    }\n\n    interface Length extends LanguageChains, NumericComparison {\n        (length: number, message?: string): Assertion;\n    }\n\n    interface Include {\n        (value: any, message?: string): Assertion;\n        keys: Keys;\n        deep: Deep;\n        ordered: Ordered;\n        members: Members;\n        any: KeyFilter;\n        all: KeyFilter;\n    }\n\n    interface Match {\n        (regexp: RegExp, message?: string): Assertion;\n    }\n\n    interface Keys {\n        (...keys: string[]): Assertion;\n        (keys: ReadonlyArray<any>|Object): Assertion;\n    }\n\n    interface Throw {\n        (expected?: string|RegExp, message?: string): Assertion;\n        (constructor: Error|Function, expected?: string|RegExp, message?: string): Assertion;\n    }\n\n    interface RespondTo {\n        (method: string, message?: string): Assertion;\n    }\n\n    interface Satisfy {\n        (matcher: Function, message?: string): Assertion;\n    }\n\n    interface Members {\n        (set: ReadonlyArray<any>, message?: string): Assertion;\n    }\n\n    interface PropertyChange {\n        (object: Object, property?: string, message?: string): Assertion;\n    }\n\n    export interface Assert {\n        /**\n         * @param expression    Expression to test for truthiness.\n         * @param message    Message to display on error.\n         */\n        (expression: any, message?: string): void;\n\n        /**\n         * Throws a failure.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message    Message to display on error.\n         * @param operator   Comparison operator, if not strict equality.\n         * @remarks Node.js assert module-compatible.\n         */\n        fail<T>(actual?: T, expected?: T, message?: string, operator?: Operator): void;\n\n        /**\n         * Asserts that object is truthy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        isOk<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that object is truthy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        ok<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that object is falsy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        isNotOk<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that object is falsy.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        notOk<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts non-strict equality (==) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        equal<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts non-strict inequality (==) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        notEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts strict equality (===) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        strictEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts strict inequality (==) of actual and expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        notStrictEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts that actual is deeply equal (==) to expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        deepEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts that actual is not deeply equal (==) to expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        notDeepEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts that actual is deeply strict equal (===) to expected.\n         *\n         * @type T   Type of the objects.\n         * @param actual   Actual value.\n         * @param expected   Potential expected value.\n         * @param message   Message to display on error.\n         */\n        deepStrictEqual<T>(actual: T, expected: T, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is strictly greater than (>) valueToBeAbove.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeAbove   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isAbove(valueToCheck: number, valueToBeAbove: number, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is greater than or equal to (>=) valueToBeAtLeast.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeAtLeast   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isAtLeast(valueToCheck: number, valueToBeAtLeast: number, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is strictly less than (<) valueToBeBelow.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeBelow   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isBelow(valueToCheck: number, valueToBeBelow: number, message?: string): void;\n\n        /**\n         * Asserts valueToCheck is less than or equal to (<=) valueToBeAtMost.\n         *\n         * @param valueToCheck   Actual value.\n         * @param valueToBeAtMost   Minimum Potential expected value.\n         * @param message   Message to display on error.\n         */\n        isAtMost(valueToCheck: number, valueToBeAtMost: number, message?: string): void;\n\n        /**\n         * Asserts that value is true.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isTrue<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is false.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isFalse<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not true.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotTrue<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not false.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotFalse<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is null.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNull<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not null.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotNull<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is NaN.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNaN<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not NaN.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotNaN<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that the target is neither null nor undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message    Message to display on error.\n         */\n        exists<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that the target is either null or undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message    Message to display on error.\n         */\n        notExists<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isUndefined<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not undefined.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isDefined<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a function.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isFunction<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a function.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotFunction<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is an object of type 'Object'\n         * (as revealed by Object.prototype.toString).\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         * @remarks The assertion does not match subclassed objects.\n         */\n        isObject<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not an object of type 'Object'\n         * (as revealed by Object.prototype.toString).\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotObject<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is an array.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isArray<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not an array.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotArray<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a string.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isString<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a string.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotString<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a number.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNumber<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a number.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotNumber<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is a boolean.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isBoolean<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value is not a boolean.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotBoolean<T>(value: T, message?: string): void;\n\n        /**\n         * Asserts that value's type is name, as determined by Object.prototype.toString.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param name   Potential expected type name of value.\n         * @param message   Message to display on error.\n         */\n        typeOf<T>(value: T, name: string, message?: string): void;\n\n        /**\n         * Asserts that value's type is not name, as determined by Object.prototype.toString.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param name   Potential expected type name of value.\n         * @param message   Message to display on error.\n         */\n        notTypeOf<T>(value: T, name: string, message?: string): void;\n\n        /**\n         * Asserts that value is an instance of constructor.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param constructor   Potential expected contructor of value.\n         * @param message   Message to display on error.\n         */\n        instanceOf<T>(value: T, constructor: Function, message?: string): void;\n\n        /**\n         * Asserts that value is not an instance of constructor.\n         *\n         * @type T   Type of value.\n         * @param value   Actual value.\n         * @param constructor   Potential expected contructor of value.\n         * @param message   Message to display on error.\n         */\n        notInstanceOf<T>(value: T, type: Function, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential substring of haystack.\n         * @param message   Message to display on error.\n         */\n        include(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   Container array, set or map.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        include<T>(haystack: ReadonlyArray<T> | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   WeakSet container.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        include<T extends object>(haystack: WeakSet<T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle.\n         *\n         * @type T   Type of haystack.\n         * @param haystack   Object.\n         * @param needle   Potential subset of the haystack's properties.\n         * @param message   Message to display on error.\n         */\n        include<T>(haystack: T, needle: Partial<T>, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential substring of haystack.\n         * @param message   Message to display on error.\n         */\n        notInclude(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   Container array, set or map.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        notInclude<T>(haystack: ReadonlyArray<T> | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   WeakSet container.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        notInclude<T extends object>(haystack: WeakSet<T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @type T   Type of haystack.\n         * @param haystack   Object.\n         * @param needle   Potential subset of the haystack's properties.\n         * @param message   Message to display on error.\n         */\n        notInclude<T>(haystack: T, needle: Partial<T>, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle. Deep equality is used.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential substring of haystack.\n         * @param message   Message to display on error.\n         *\n         * @deprecated Does not have any effect on string. Use {@link Assert#include} instead.\n         */\n        deepInclude(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack includes needle. Deep equality is used.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   Container array, set or map.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        deepInclude<T>(haystack: ReadonlyArray<T> | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle.\n         *\n         * @type T   Type of haystack.\n         * @param haystack   Object.\n         * @param needle   Potential subset of the haystack's properties.\n         * @param message   Message to display on error.\n         */\n        deepInclude<T>(haystack: T, needle: T extends WeakSet<any> ? never : Partial<T>, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle. Deep equality is used.\n         *\n         * @param haystack   Container string.\n         * @param needle   Potential substring of haystack.\n         * @param message   Message to display on error.\n         *\n         * @deprecated Does not have any effect on string. Use {@link Assert#notInclude} instead.\n         */\n        notDeepInclude(haystack: string, needle: string, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle. Deep equality is used.\n         *\n         * @type T   Type of values in haystack.\n         * @param haystack   Container array, set or map.\n         * @param needle   Potential value contained in haystack.\n         * @param message   Message to display on error.\n         */\n        notDeepInclude<T>(haystack: ReadonlyArray<T> | ReadonlySet<T> | ReadonlyMap<any, T>, needle: T, message?: string): void;\n\n        /**\n         * Asserts that haystack does not includes needle. Deep equality is used.\n         *\n         * @type T   Type of haystack.\n         * @param haystack   Object.\n         * @param needle   Potential subset of the haystack's properties.\n         * @param message   Message to display on error.\n         */\n        notDeepInclude<T>(haystack: T, needle: T extends WeakSet<any> ? never : Partial<T>, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object.\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        nestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object.\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notNestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while checking for deep equality\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        deepNestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ does not include ‘needle’. Can be used to assert the absence of a subset of properties in an object while checking for deep equality.\n         *\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.Asserts that ‘haystack’ includes ‘needle’.\n         * Can be used to assert the inclusion of a subset of properties in an object.\n         * Enables the use of dot- and bracket-notation for referencing nested properties.\n         * ‘[]’ and ‘.’ in property names can be escaped using double backslashes.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notDeepNestedInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        ownInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notOwnInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the inclusion of a subset of properties in an object while ignoring inherited properties and checking for deep\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        deepOwnInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that ‘haystack’ includes ‘needle’. Can be used to assert the absence of a subset of properties in an object while ignoring inherited properties and checking for deep equality.\n         *\n         * @param haystack\n         * @param needle\n         * @param message   Message to display on error.\n         */\n        notDeepOwnInclude(haystack: any, needle: any, message?: string): void;\n\n        /**\n         * Asserts that value matches the regular expression regexp.\n         *\n         * @param value   Actual value.\n         * @param regexp   Potential match of value.\n         * @param message   Message to display on error.\n         */\n        match(value: string, regexp: RegExp, message?: string): void;\n\n        /**\n         * Asserts that value does not match the regular expression regexp.\n         *\n         * @param value   Actual value.\n         * @param regexp   Potential match of value.\n         * @param message   Message to display on error.\n         */\n        notMatch(expected: any, regexp: RegExp, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        property<T>(object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        notProperty<T>(object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property, which can be a string\n         * using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        deepProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property, which can be a\n         * string using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param message   Message to display on error.\n         */\n        notDeepProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with value given by value.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        propertyVal<T, V>(object: T, property: string /* keyof T */, value: V, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with value given by value.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        propertyNotVal<T, V>(object: T, property: string /* keyof T */, value: V, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property, which can be a string\n         * using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        deepPropertyVal<T, V>(object: T, property: string, value: V, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property, which can be a\n         * string using dot- and bracket-notation for deep reference.\n         *\n         * @type T   Type of object.\n         * @type V   Type of value.\n         * @param object   Container object.\n         * @param property   Potential contained property of object.\n         * @param value   Potential expected property value.\n         * @param message   Message to display on error.\n         */\n        deepPropertyNotVal<T, V>(object: T, property: string, value: V, message?: string): void;\n\n        /**\n         * Asserts that object has a length property with the expected value.\n         *\n         * @type T   Type of object.\n         * @param object   Container object.\n         * @param length   Potential expected length of object.\n         * @param message   Message to display on error.\n         */\n        lengthOf<T extends { readonly length?: number }>(object: T, length: number, message?: string): void;\n\n        /**\n         * Asserts that fn will throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        throw(fn: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param regExp   Potential expected message match.\n         * @param message   Message to display on error.\n         */\n        throw(fn: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        throw(fn: Function, constructor: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        throw(fn: Function, constructor: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that fn will throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        throws(fn: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param errType  Potential expected message match or error constructor.\n         * @param message   Message to display on error.\n         */\n        throws(fn: Function, errType: RegExp|Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        throws(fn: Function, errType: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that fn will throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param regExp   Potential expected message match.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: Function, errType: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        Throw(fn: Function, errType: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that fn will not throw an error.\n         *\n         * @param fn   Function that may throw.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param regExp   Potential expected message match.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: Function, regExp: RegExp): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: Function, errType: Function, message?: string): void;\n\n        /**\n         * Asserts that function will throw an error that is an instance of constructor\n         * and an error with message matching regexp.\n         *\n         * @param fn   Function that may throw.\n         * @param constructor   Potential expected error constructor.\n         * @param message   Message to display on error.\n         */\n        doesNotThrow(fn: Function, errType: Function, regExp: RegExp): void;\n\n        /**\n         * Compares two values using operator.\n         *\n         * @param val1   Left value during comparison.\n         * @param operator   Comparison operator.\n         * @param val2   Right value during comparison.\n         * @param message   Message to display on error.\n         */\n        operator(val1: OperatorComparable, operator: Operator, val2: OperatorComparable, message?: string): void;\n\n        /**\n         * Asserts that the target is equal to expected, to within a +/- delta range.\n         *\n         * @param actual   Actual value\n         * @param expected   Potential expected value.\n         * @param delta   Maximum differenced between values.\n         * @param message   Message to display on error.\n         */\n        closeTo(actual: number, expected: number, delta: number, message?: string): void;\n\n        /**\n         * Asserts that the target is equal to expected, to within a +/- delta range.\n         *\n         * @param actual   Actual value\n         * @param expected   Potential expected value.\n         * @param delta   Maximum differenced between values.\n         * @param message   Message to display on error.\n         */\n        approximately(act: number, exp: number, delta: number, message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members. Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members using deep equality checking.\n         * Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameDeepMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members in the same order.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 don’t have the same members in the same order.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        notSameOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 have the same members in the same order.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        sameDeepOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that set1 and set2 don’t have the same members in the same order.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param set1   Actual set of values.\n         * @param set2   Potential expected set of values.\n         * @param message   Message to display on error.\n         */\n        notSameDeepOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset in the same order beginning with the first element in superset.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.\n         * Uses a strict equality check (===).\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        notIncludeOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset in the same order beginning with the first element in superset.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeDeepOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.\n         * Uses a deep equality check.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        notIncludeDeepOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset. Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that subset is included in superset using deep equality checking.\n         * Order is not take into account.\n         *\n         * @type T   Type of set values.\n         * @param superset   Actual set of values.\n         * @param subset   Potential contained set of values.\n         * @param message   Message to display on error.\n         */\n        includeDeepMembers<T>(superset: T[], subset: T[], message?: string): void;\n\n        /**\n         * Asserts that non-object, non-array value inList appears in the flat array list.\n         *\n         * @type T   Type of list values.\n         * @param inList   Value expected to be in the list.\n         * @param list   List of values.\n         * @param message   Message to display on error.\n         */\n        oneOf<T>(inList: T, list: T[], message?: string): void;\n\n        /**\n         * Asserts that a function changes the value of a property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected to be modified.\n         * @param message   Message to display on error.\n         */\n        changes<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function does not change the value of a property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected not to be modified.\n         * @param message   Message to display on error.\n         */\n        doesNotChange<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function increases an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected to be increased.\n         * @param message   Message to display on error.\n         */\n        increases<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function does not increase an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected not to be increased.\n         * @param message   Message to display on error.\n         */\n        doesNotIncrease<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function decreases an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected to be decreased.\n         * @param message   Message to display on error.\n         */\n        decreases<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts that a function does not decrease an object property.\n         *\n         * @type T   Type of object.\n         * @param modifier   Function to run.\n         * @param object   Container object.\n         * @param property   Property of object expected not to be decreased.\n         * @param message   Message to display on error.\n         */\n        doesNotDecrease<T>(modifier: Function, object: T, property: string /* keyof T */, message?: string): void;\n\n        /**\n         * Asserts if value is not a false value, and throws if it is a true value.\n         *\n         * @type T   Type of object.\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         * @remarks This is added to allow for chai to be a drop-in replacement for\n         *          Node’s assert class.\n         */\n        ifError<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is extensible (can have new properties added to it).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isExtensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is extensible (can have new properties added to it).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        extensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not extensible.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotExtensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not extensible.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        notExtensible<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is sealed (can have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isSealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is sealed (can have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        sealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not sealed.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotSealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not sealed.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        notSealed<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isFrozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        frozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isNotFrozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that object is not frozen (cannot have new properties added to it\n         * and its existing properties cannot be removed).\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        notFrozen<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that the target does not contain any values. For arrays and\n         * strings, it checks the length property. For Map and Set instances, it\n         * checks the size property. For non-function objects, it gets the count\n         * of own enumerable string keys.\n         *\n         * @type T   Type of object\n         * @param object   Actual value.\n         * @param message   Message to display on error.\n         */\n        isEmpty<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that the target contains values. For arrays and strings, it checks\n         * the length property. For Map and Set instances, it checks the size property.\n         * For non-function objects, it gets the count of own enumerable string keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param message    Message to display on error.\n         */\n        isNotEmpty<T>(object: T, message?: string): void;\n\n        /**\n         * Asserts that `object` has at least one of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAnyKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has all and only all of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        containsAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has none of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAnyKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` does not have at least one of the `keys` provided.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has at least one of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAnyDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` has all and only all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        hasAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` contains all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        containsAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` contains all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAnyDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that `object` contains all of the `keys` provided.\n         * Since Sets and Maps can have objects as keys you can use this assertion to perform\n         * a deep comparison.\n         * You can also provide a single object instead of a `keys` array and its keys\n         * will be used as the expected set of keys.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param keys   Keys to check\n         * @param message    Message to display on error.\n         */\n        doesNotHaveAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;\n\n        /**\n         * Asserts that object has a direct or inherited property named by property,\n         * which can be a string using dot- and bracket-notation for nested reference.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param message    Message to display on error.\n         */\n        nestedProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property,\n         * which can be a string using dot- and bracket-notation for nested reference.\n         * The property cannot exist on the object nor anywhere in its prototype chain.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param message    Message to display on error.\n         */\n        notNestedProperty<T>(object: T, property: string, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        nestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property with value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a strict equality check (===).\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        notNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n\n        /**\n         * Asserts that object has a property named by property with a value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a deep equality check.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        deepNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n\n        /**\n         * Asserts that object does not have a property named by property with value given by value.\n         * property can use dot- and bracket-notation for nested reference. Uses a deep equality check.\n         *\n         * @type T   Type of object.\n         * @param object   Object to test.\n         * @param property    Property to test.\n         * @param value    Value to test.\n         * @param message    Message to display on error.\n         */\n        notDeepNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;\n    }\n\n    export interface Config {\n        /**\n         * Default: false\n         */\n        includeStack: boolean;\n\n        /**\n         * Default: true\n         */\n        showDiff: boolean;\n\n        /**\n         * Default: 40\n         */\n        truncateThreshold: number;\n\n        /**\n         * Default: true\n         */\n        useProxy: boolean;\n\n        /**\n         * Default: ['then', 'catch', 'inspect', 'toJSON']\n         */\n        proxyExcludedKeys: string[];\n    }\n\n    export class AssertionError {\n        constructor(message: string, _props?: any, ssf?: Function);\n        name: string;\n        message: string;\n        showDiff: boolean;\n        stack: string;\n    }\n}\n\ndeclare const chai: Chai.ChaiStatic;\n\ndeclare module \"chai\" {\n    export = chai;\n}\n\ninterface Object {\n    should: Chai.Assertion;\n}\n\n// Type definitions for chai-as-promised 7.1.0\n// Project: https://github.com/domenic/chai-as-promised/\n// Definitions by: jt000 <https://github.com/jt000>,\n//                 Yuki Kokubun <https://github.com/Kuniwak>,\n//                 Leonard Thieu <https://github.com/leonard-thieu>,\n//                 Mike Lazer-Walker <https://github.com/lazerwalker>,\n//                 Matt Bishop <https://github.com/mattbishop>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 3.0\n\n/// <reference types=\"chai\" />\n\ndeclare module 'chai-as-promised' {\n    interface ChaiAsPromised extends Chai.ChaiPlugin {\n        transferPromiseness(assertion: Chai.PromisedAssertion, promise: PromiseLike<any>): void;\n        transformAsserterArgs(values: any[]): any;\n    }\n\n    const chaiAsPromised: ChaiAsPromised;\n    export = chaiAsPromised;\n}\n\ndeclare namespace Chai {\n\n    // For BDD API\n    interface Assertion extends LanguageChains, NumericComparison, TypeComparison {\n        eventually: PromisedAssertion;\n        become(expected: any): PromisedAssertion;\n        fulfilled: PromisedAssertion;\n        rejected: PromisedAssertion;\n        rejectedWith: PromisedThrow;\n        notify(fn: Function): PromisedAssertion;\n    }\n\n    // Eventually does not have .then(), but PromisedAssertion have.\n    interface Eventually extends PromisedLanguageChains, PromisedNumericComparison, PromisedTypeComparison {\n        // From chai-as-promised\n        become(expected: any): PromisedAssertion;\n        fulfilled: PromisedAssertion;\n        rejected: PromisedAssertion;\n        rejectedWith: PromisedThrow;\n        notify(fn: Function): PromisedAssertion;\n\n        // From chai\n        not: PromisedAssertion;\n        deep: PromisedDeep;\n        ordered: PromisedOrdered;\n        nested: PromisedNested;\n        any: PromisedKeyFilter;\n        all: PromisedKeyFilter;\n        a: PromisedTypeComparison;\n        an: PromisedTypeComparison;\n        include: PromisedInclude;\n        contain: PromisedInclude;\n        ok: PromisedAssertion;\n        true: PromisedAssertion;\n        false: PromisedAssertion;\n        null: PromisedAssertion;\n        undefined: PromisedAssertion;\n        NaN: PromisedAssertion;\n        exist: PromisedAssertion;\n        empty: PromisedAssertion;\n        arguments: PromisedAssertion;\n        Arguments: PromisedAssertion;\n        equal: PromisedEqual;\n        equals: PromisedEqual;\n        eq: PromisedEqual;\n        eql: PromisedEqual;\n        eqls: PromisedEqual;\n        property: PromisedProperty;\n        ownProperty: PromisedOwnProperty;\n        haveOwnProperty: PromisedOwnProperty;\n        ownPropertyDescriptor: PromisedOwnPropertyDescriptor;\n        haveOwnPropertyDescriptor: PromisedOwnPropertyDescriptor;\n        length: PromisedLength;\n        lengthOf: PromisedLength;\n        match: PromisedMatch;\n        matches: PromisedMatch;\n        string(string: string, message?: string): PromisedAssertion;\n        keys: PromisedKeys;\n        key(string: string): PromisedAssertion;\n        throw: PromisedThrow;\n        throws: PromisedThrow;\n        Throw: PromisedThrow;\n        respondTo: PromisedRespondTo;\n        respondsTo: PromisedRespondTo;\n        itself: PromisedAssertion;\n        satisfy: PromisedSatisfy;\n        satisfies: PromisedSatisfy;\n        closeTo: PromisedCloseTo;\n        approximately: PromisedCloseTo;\n        members: PromisedMembers;\n        increase: PromisedPropertyChange;\n        increases: PromisedPropertyChange;\n        decrease: PromisedPropertyChange;\n        decreases: PromisedPropertyChange;\n        change: PromisedPropertyChange;\n        changes: PromisedPropertyChange;\n        extensible: PromisedAssertion;\n        sealed: PromisedAssertion;\n        frozen: PromisedAssertion;\n        oneOf(list: any[], message?: string): PromisedAssertion;\n    }\n\n    interface PromisedAssertion extends Eventually, PromiseLike<any> {\n    }\n\n    interface PromisedLanguageChains {\n        eventually: Eventually;\n\n        // From chai\n        to: PromisedAssertion;\n        be: PromisedAssertion;\n        been: PromisedAssertion;\n        is: PromisedAssertion;\n        that: PromisedAssertion;\n        which: PromisedAssertion;\n        and: PromisedAssertion;\n        has: PromisedAssertion;\n        have: PromisedAssertion;\n        with: PromisedAssertion;\n        at: PromisedAssertion;\n        of: PromisedAssertion;\n        same: PromisedAssertion;\n        but: PromisedAssertion;\n        does: PromisedAssertion;\n    }\n\n    interface PromisedNumericComparison {\n        above: PromisedNumberComparer;\n        gt: PromisedNumberComparer;\n        greaterThan: PromisedNumberComparer;\n        least: PromisedNumberComparer;\n        gte: PromisedNumberComparer;\n        below: PromisedNumberComparer;\n        lt: PromisedNumberComparer;\n        lessThan: PromisedNumberComparer;\n        most: PromisedNumberComparer;\n        lte: PromisedNumberComparer;\n        within(start: number, finish: number, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedNumberComparer {\n        (value: number, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedTypeComparison {\n        (type: string, message?: string): PromisedAssertion;\n        instanceof: PromisedInstanceOf;\n        instanceOf: PromisedInstanceOf;\n    }\n\n    interface PromisedInstanceOf {\n        (constructor: Object, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedCloseTo {\n        (expected: number, delta: number, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedNested {\n        include: PromisedInclude;\n        property: PromisedProperty;\n        members: PromisedMembers;\n    }\n\n    interface PromisedDeep {\n        equal: PromisedEqual;\n        equals: PromisedEqual;\n        eq: PromisedEqual;\n        include: PromisedInclude;\n        property: PromisedProperty;\n        members: PromisedMembers;\n        ordered: PromisedOrdered\n    }\n\n    interface PromisedOrdered {\n        members: PromisedMembers;\n    }\n\n    interface PromisedKeyFilter {\n        keys: PromisedKeys;\n    }\n\n    interface PromisedEqual {\n        (value: any, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedProperty {\n        (name: string, value?: any, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedOwnProperty {\n        (name: string, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedOwnPropertyDescriptor {\n        (name: string, descriptor: PropertyDescriptor, message?: string): PromisedAssertion;\n        (name: string, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedLength extends PromisedLanguageChains, PromisedNumericComparison {\n        (length: number, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedInclude {\n        (value: Object, message?: string): PromisedAssertion;\n        (value: string, message?: string): PromisedAssertion;\n        (value: number, message?: string): PromisedAssertion;\n        keys: PromisedKeys;\n        deep: PromisedDeep;\n        ordered: PromisedOrdered;\n        members: PromisedMembers;\n        any: PromisedKeyFilter;\n        all: PromisedKeyFilter;\n    }\n\n    interface PromisedMatch {\n        (regexp: RegExp | string, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedKeys {\n        (...keys: string[]): PromisedAssertion;\n        (keys: any[]): PromisedAssertion;\n        (keys: Object): PromisedAssertion;\n    }\n\n    interface PromisedThrow {\n        (): PromisedAssertion;\n        (expected: string | RegExp, message?: string): PromisedAssertion;\n        (constructor: Error | Function, expected?: string | RegExp, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedRespondTo {\n        (method: string, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedSatisfy {\n        (matcher: Function, message?: string): PromisedAssertion;\n    }\n\n    interface PromisedMembers {\n        (set: any[], message?: string): PromisedAssertion;\n    }\n\n    interface PromisedPropertyChange {\n        (object: Object, property: string, message?: string): PromisedAssertion;\n    }\n\n    // For Assert API\n    interface Assert {\n        eventually: PromisedAssert;\n        isFulfilled(promise: PromiseLike<any>, message?: string): PromiseLike<void>;\n        becomes(promise: PromiseLike<any>, expected: any, message?: string): PromiseLike<void>;\n        doesNotBecome(promise: PromiseLike<any>, expected: any, message?: string): PromiseLike<void>;\n        isRejected(promise: PromiseLike<any>, message?: string): PromiseLike<void>;\n        isRejected(promise: PromiseLike<any>, expected: any, message?: string): PromiseLike<void>;\n        isRejected(promise: PromiseLike<any>, match: RegExp, message?: string): PromiseLike<void>;\n        notify(fn: Function): PromiseLike<void>;\n    }\n\n    export interface PromisedAssert {\n        fail(actual?: any, expected?: any, msg?: string, operator?: string): PromiseLike<void>;\n\n        isOk(val: any, msg?: string): PromiseLike<void>;\n        ok(val: any, msg?: string): PromiseLike<void>;\n        isNotOk(val: any, msg?: string): PromiseLike<void>;\n        notOk(val: any, msg?: string): PromiseLike<void>;\n\n        equal(act: any, exp: any, msg?: string): PromiseLike<void>;\n        notEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n\n        strictEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n        notStrictEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n\n        deepEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n        notDeepEqual(act: any, exp: any, msg?: string): PromiseLike<void>;\n\n        isAbove(val: number, above: number, msg?: string): PromiseLike<void>;\n        isAtLeast(val: number, atLeast: number, msg?: string): PromiseLike<void>;\n        isAtBelow(val: number, below: number, msg?: string): PromiseLike<void>;\n        isAtMost(val: number, atMost: number, msg?: string): PromiseLike<void>;\n\n        isTrue(val: any, msg?: string): PromiseLike<void>;\n        isFalse(val: any, msg?: string): PromiseLike<void>;\n\n        isNotTrue(val: any, msg?: string): PromiseLike<void>;\n        isNotFalse(val: any, msg?: string): PromiseLike<void>;\n\n        isNull(val: any, msg?: string): PromiseLike<void>;\n        isNotNull(val: any, msg?: string): PromiseLike<void>;\n\n        isNaN(val: any, msg?: string): PromiseLike<void>;\n        isNotNaN(val: any, msg?: string): PromiseLike<void>;\n\n        exists(val: any, msg?: string): PromiseLike<void>;\n        notExists(val: any, msg?: string): PromiseLike<void>;\n\n        isUndefined(val: any, msg?: string): PromiseLike<void>;\n        isDefined(val: any, msg?: string): PromiseLike<void>;\n\n        isFunction(val: any, msg?: string): PromiseLike<void>;\n        isNotFunction(val: any, msg?: string): PromiseLike<void>;\n\n        isObject(val: any, msg?: string): PromiseLike<void>;\n        isNotObject(val: any, msg?: string): PromiseLike<void>;\n\n        isArray(val: any, msg?: string): PromiseLike<void>;\n        isNotArray(val: any, msg?: string): PromiseLike<void>;\n\n        isString(val: any, msg?: string): PromiseLike<void>;\n        isNotString(val: any, msg?: string): PromiseLike<void>;\n\n        isNumber(val: any, msg?: string): PromiseLike<void>;\n        isNotNumber(val: any, msg?: string): PromiseLike<void>;\n\n        isBoolean(val: any, msg?: string): PromiseLike<void>;\n        isNotBoolean(val: any, msg?: string): PromiseLike<void>;\n\n        typeOf(val: any, type: string, msg?: string): PromiseLike<void>;\n        notTypeOf(val: any, type: string, msg?: string): PromiseLike<void>;\n\n        instanceOf(val: any, type: Function, msg?: string): PromiseLike<void>;\n        notInstanceOf(val: any, type: Function, msg?: string): PromiseLike<void>;\n\n        include(exp: string, inc: any, msg?: string): PromiseLike<void>;\n        include(exp: any[], inc: any, msg?: string): PromiseLike<void>;\n\n        notInclude(exp: string, inc: any, msg?: string): PromiseLike<void>;\n        notInclude(exp: any[], inc: any, msg?: string): PromiseLike<void>;\n\n        match(exp: any, re: RegExp, msg?: string): PromiseLike<void>;\n        notMatch(exp: any, re: RegExp, msg?: string): PromiseLike<void>;\n\n        property(obj: Object, prop: string, msg?: string): PromiseLike<void>;\n        notProperty(obj: Object, prop: string, msg?: string): PromiseLike<void>;\n        deepProperty(obj: Object, prop: string, msg?: string): PromiseLike<void>;\n        notDeepProperty(obj: Object, prop: string, msg?: string): PromiseLike<void>;\n\n        propertyVal(obj: Object, prop: string, val: any, msg?: string): PromiseLike<void>;\n        propertyNotVal(obj: Object, prop: string, val: any, msg?: string): PromiseLike<void>;\n\n        deepPropertyVal(obj: Object, prop: string, val: any, msg?: string): PromiseLike<void>;\n        deepPropertyNotVal(obj: Object, prop: string, val: any, msg?: string): PromiseLike<void>;\n\n        lengthOf(exp: any, len: number, msg?: string): PromiseLike<void>;\n        //alias frenzy\n        throw(fn: Function, msg?: string): PromiseLike<void>;\n        throw(fn: Function, regExp: RegExp): PromiseLike<void>;\n        throw(fn: Function, errType: Function, msg?: string): PromiseLike<void>;\n        throw(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;\n\n        throws(fn: Function, msg?: string): PromiseLike<void>;\n        throws(fn: Function, regExp: RegExp): PromiseLike<void>;\n        throws(fn: Function, errType: Function, msg?: string): PromiseLike<void>;\n        throws(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;\n\n        Throw(fn: Function, msg?: string): PromiseLike<void>;\n        Throw(fn: Function, regExp: RegExp): PromiseLike<void>;\n        Throw(fn: Function, errType: Function, msg?: string): PromiseLike<void>;\n        Throw(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;\n\n        doesNotThrow(fn: Function, msg?: string): PromiseLike<void>;\n        doesNotThrow(fn: Function, regExp: RegExp): PromiseLike<void>;\n        doesNotThrow(fn: Function, errType: Function, msg?: string): PromiseLike<void>;\n        doesNotThrow(fn: Function, errType: Function, regExp: RegExp): PromiseLike<void>;\n\n        operator(val: any, operator: string, val2: any, msg?: string): PromiseLike<void>;\n        closeTo(act: number, exp: number, delta: number, msg?: string): PromiseLike<void>;\n        approximately(act: number, exp: number, delta: number, msg?: string): PromiseLike<void>;\n\n        sameMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        sameDeepMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        sameOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        notSameOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        sameDeepOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        notSameDeepOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        includeOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        notIncludeOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        includeDeepOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        notIncludeDeepOrderedMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        includeMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n        includeDeepMembers(set1: any[], set2: any[], msg?: string): PromiseLike<void>;\n\n        oneOf(val: any, list: any[], msg?: string): PromiseLike<void>;\n\n        changes(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        doesNotChange(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        increases(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        doesNotIncrease(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        decreases(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n        doesNotDecrease(modifier: Function, obj: Object, property: string, msg?: string): PromiseLike<void>;\n\n        ifError(val: any, msg?: string): PromiseLike<void>;\n\n        isExtensible(obj: Object, msg?: string): PromiseLike<void>;\n        isNotExtensible(obj: Object, msg?: string): PromiseLike<void>;\n\n        isSealed(obj: Object, msg?: string): PromiseLike<void>;\n        sealed(obj: Object, msg?: string): PromiseLike<void>;\n        isNotSealed(obj: Object, msg?: string): PromiseLike<void>;\n        notSealed(obj: Object, msg?: string): PromiseLike<void>;\n\n        isFrozen(obj: Object, msg?: string): PromiseLike<void>;\n        frozen(obj: Object, msg?: string): PromiseLike<void>;\n        isNotFrozen(obj: Object, msg?: string): PromiseLike<void>;\n        notFrozen(obj: Object, msg?: string): PromiseLike<void>;\n\n        isEmpty(val: any, msg?: string): PromiseLike<void>;\n        isNotEmpty(val: any, msg?: string): PromiseLike<void>;\n    }\n}\n\n// Type definitions for WavesKeeper\n// Project: WavesKeeper\n\n/*~ This template shows how to write a global plugin. */\n\ninterface Window {\n    WavesKeeper: WavesKeeper.TWavesKeeperApi;\n}\n\ndeclare var WavesKeeper: WavesKeeper.TWavesKeeperApi;\n\ndeclare namespace WavesKeeper {\n\n    type TWavesKeeperApi = {\n        /**\n         * This is a method for obtaining a signature of authorization data while verifying Waves' user.\n         * @param data\n         */\n        auth(data: IAuthData): Promise<IAuthResponse>;\n\n        /**\n         * If a website is trusted, Waves Keeper public data are returned.\n         */\n        publicState(): Promise<IPublicStateResponse>;\n\n        /**\n         * Waves Keeper's method for cancelling an order to the matcher.\n         * It works identically to signCancelOrder, but also tries to send data to the matcher.\n         * @param data\n         */\n        signAndPublishCancelOrder(data: TSignCancelOrderData): Promise<string>;\n\n        /**\n         * Waves Keeper's method for creating an order to the matcher is identical to signOrder\n         * but it also tries to send data to the matcher.\n         * @param data\n         */\n        signAndPublishOrder(data: TSignOrderData): Promise<string>;\n\n        /**\n         * This is similar to \"signTransaction\", but it also broadcasts a transaction to the blockchain.\n         * @param data\n         */\n        signAndPublishTransaction(data: TSignTransactionData): Promise<string>;\n\n        /**\n         * Waves Keeper's method for signing cancellation of an order to the matcher.\n         * @param data\n         */\n        signCancelOrder(data: TSignCancelOrderData): Promise<string>;\n\n        /**\n         * Waves Keeper's method for signing an order to the matcher.\n         * @param data\n         */\n        signOrder(data: TSignOrderData): Promise<string>;\n\n        /**\n         * A method for signing transactions in Waves' network.\n         * @param data\n         */\n        signTransaction(data: TSignTransactionData): Promise<string>;\n\n        /**\n         * Waves Keeper's method for signing typified data, for signing requests on various services.\n         * @param data\n         */\n        signRequest(data: TSignRequestData): Promise<string>;\n\n        /**\n         * A package transaction signature. Sometimes several transactions need to be simultaneously signed,\n         * and for users' convenience, up to seven transactions at ones could be signed.\n         * Only certain types of transactions are permitted:\n         * issue, transfer, reissue, burn, create alias, mass transfer, data\n         * @param tx\n         * @param name\n         */\n        signTransactionPackage(tx: TSignTransactionPackageData, name?: string): Promise<Array<string>>;\n\n        /**\n         * Send message to keeper.\n         * You can send message only 1 time in 30 sec for trusted sites with send permission\n         * @param data\n         */\n        notification(data: INotificationData): Promise<any>;\n\n        /**\n         * You can encrypt string messages to account in Waves network.\n         * You need have recipient publicKey.\n         * @param stringToEncrypt\n         * String to encrypt\n         * @param publicKey\n         * Public key in base58 string\n         * @param prefix\n         * Prefix is secret app string need for encoding\n         */\n        encryptMessage(stringToEncrypt: string, publicKey: string, prefix: string): Promise<string>;\n\n        /**\n         * You can decrypt string messages from account in Waves network to you.\n         * You need have sender publicKey and encrypted message.\n         * @param stringToDecrypt\n         * String to decrypt\n         * @param publicKey\n         * Public key in base58 string\n         * @param prefix\n         * Prefix is secret app string need for encoding\n         */\n        decryptMessage(stringToDecrypt: string, publicKey: string, prefix: string): Promise<string>;\n\n        /**\n         * Allows subscribing to Waves Keeper events.\n         * If a website is not trusted, events won't show.\n         * @param event\n         * Supports events:\n         * update – subscribe to updates of the state\n         * @param cb\n         */\n        on(event: 'update', cb: (state: IPublicStateResponse) => any): object;\n\n    }\n\n    interface IAuthData {\n        /**\n         * a string line with any data (required field)\n         */\n        data: string;\n        /**\n         * name of the service (optional field)\n         */\n        name?: string;\n        /**\n         * a websites' full URL for redirect (optional field)\n         */\n        referrer?: string;\n        /**\n         * path to the logo relative to the referrer or origin of the website (optional field)\n         */\n        icon?: string;\n        /**\n         *  relative path to the website's Auth API (optional field)\n         */\n        successPath?: string;\n    }\n\n    interface IAuthResponse {\n        /**\n         * an address in Waves network\n         */\n        address: string;\n        /**\n         * a host that requested a signature\n         */\n        host: string;\n        /**\n         * a prefix participating in the signature\n         */\n        prefix: string;\n        /**\n         * the user's public key\n         */\n        publicKey: string;\n        /**\n         * signature\n         */\n        signature: string;\n        /**\n         * API version\n         */\n        version: number;\n        /**\n         * the name of an application that requested a signature\n         */\n        name: string;\n    }\n\n    interface IPublicStateResponse {\n        /**\n         * boolean keeper initialized\n         */\n        initialized: boolean;\n        /**\n         * boolean keeper in wait mode\n         */\n        locked: boolean;\n        /**\n         * current account, if the user allowed access to the website, or null\n         */\n        account: TPublicStateAccount | null;\n        /**\n         * current Waves network, node and matcher addresses\n         */\n        network: TPublicStateNetwork,\n        /**\n         * signature request statuses\n         */\n        messages: Array<TPublicStateMessage>,\n        /**\n         * available transaction versions for each type\n         */\n        txVersion: Record<number, Array<number>>;\n    }\n\n    type TPublicStateNetwork = {\n        code: string;\n        server: string;\n        matcher: string;\n    }\n\n    type TPublicStateAccount = {\n        name: string;\n        publicKey: string;\n        address: string;\n        networkCode: string;\n        network: string;\n        balance: TAccountBalance;\n        type: string;\n    }\n\n    type TAccountBalance = {\n        available: string;\n        leasedOut: string;\n        network: string;\n    }\n\n    type TPublicStateMessage = {\n        id: string;\n        status: string;\n    }\n\n    interface ICancelOrderData {\n        /**\n         * order ID\n         */\n        id: string;\n        /**\n         * sender's public key in base58\n         */\n        senderPublicKey?: string;\n    }\n\n    type TSignCancelOrderData = ISignData<1003, ICancelOrderData>;\n\n    interface ISignOrderDataBody {\n        /**\n         * MoneyLike - amount\n         */\n        amount: TMoney;\n        /**\n         * MoneyLike - price\n         */\n        price: TMoney;\n        /**\n         * 'sell'/'buy' – order type\n         */\n        orderType: 'sell' | 'buy';\n        /**\n         * MoneyLike - fee (0.003 WAVES minimum)\n         */\n        matcherFee: TMoney;\n        /**\n         * the public key of the exchange service\n         */\n        matcherPublicKey: string;\n        /**\n         * the order's expiration time\n         */\n        expiration: string | number;\n        /**\n         * current time\n         */\n        timestamp?: string | number;\n        /**\n         * public key in base58\n         */\n        senderPublicKey?: string;\n    }\n\n    type TSignOrderData = ISignData<1002, ISignOrderDataBody>;\n\n    interface ISignRequestBody {\n        timestamp: number | string;\n        /**\n         * public key in base58\n         */\n        senderPublicKey?: string;\n    }\n\n    type TSignRequestData = ISignData<1001 | 1004, ISignRequestBody>;\n\n    type TSignTransactionData =\n        TIssueTxData |\n        TTransferTxData |\n        TReissueTxData |\n        TBurnTxData |\n        TLeaseTxData |\n        TLeaseCancelTxData |\n        TCreateAliasTxData |\n        TMassTransferTxData |\n        TDataTxData |\n        TSetScriptTxData |\n        TSponsoredFeeTxData |\n        TSetAssetScriptTxData |\n        TScriptInvocationTxData;\n\n    interface ISignData<TYPE extends number, BODY> {\n        type: TYPE;\n        data: BODY;\n    }\n\n    interface ITransactionBase {\n        /**\n         * MoneyLike - fee\n         */\n        fee: TMoney;\n        /**\n         * sender's public key in base58\n         */\n        senderPublicKey?: string;\n        /**\n         * time in ms\n         */\n        timestamp?: number | string;\n    }\n\n    interface IIssueTx extends ITransactionBase {\n        /**\n         * [4, 16] string – token name\n         */\n        name: string;\n        /**\n         * [0, 1000] string – token description\n         */\n        description: string,\n        /**\n         * [0 - (JLM)] number/string - quantity\n         */\n        quantity: number | string;\n        /**\n         * [0 - 8] number - precision\n         */\n        precision: number;\n        /**\n         * can reissue token\n         */\n        reissuable: boolean;\n        /**\n         * smart asset\n         */\n        script?: string;\n    }\n\n    type TIssueTxData = ISignData<3, IIssueTx>;\n\n    interface ITransferTx extends ITransactionBase {\n        /**\n         * MoneyLike - amount\n         */\n        amount: TMoney;\n        /**\n         * recipient's address or alias\n         */\n        recipient: string;\n        /**\n         * [,140 bytes] string or byte Array – additional info in text (optional field)\n         */\n        attachment?: string | Uint8Array | Array<number>;\n    }\n\n    type TTransferTxData = ISignData<4, ITransferTx>;\n\n    interface IReissueTx extends ITransactionBase {\n        /**\n         * asset ID\n         */\n        assetId: string;\n        /**\n         * [0 - (JLM)] number/string/MoneyLike - quantity\n         */\n        quantity: number | string | TMoney;\n        /**\n         * deny reissue\n         */\n        reissuable: boolean;\n    }\n\n    type TReissueTxData = ISignData<5, IReissueTx>;\n\n    interface IBurnTx extends ITransactionBase {\n        /**\n         * asset ID\n         */\n        assetId: string;\n        /**\n         * [0 - (JLM)] number/string/MoneyLike - quantity,\n         */\n        amount: number | string | TMoney;\n    }\n\n    type TBurnTxData = ISignData<6, IBurnTx>;\n\n    interface ILeaseTx extends ITransactionBase {\n        /**\n         * recipient's address or alias\n         */\n        recipient: string;\n        /**\n         * [0 - (JLM)] number/string/MoneyLike - quantity\n         */\n        amount: number | string | TMoney;\n    }\n\n    type TLeaseTxData = ISignData<8, ILeaseTx>;\n\n    interface ILeaseCancelTx extends ITransactionBase {\n        /**\n         * leasing transaction ID\n         */\n        leaseId: string;\n    }\n\n    type TLeaseCancelTxData = ISignData<9, ILeaseCancelTx>;\n\n    interface ICreateAliasTx extends ITransactionBase {\n        /**\n         * [4, 30] string - alias\n         */\n        alias: string;\n    }\n\n    type TCreateAliasTxData = ISignData<10, ICreateAliasTx>;\n\n    interface IMassTransferTx extends ITransactionBase {\n        /**\n         * moneyLike – total to be sent\n         * instead of calculating the amount you may insert { assetId: \"ID of the asset to be sent\", coins: 0},\n         */\n        totalAmount: TMoney;\n        /**\n         * a mass of objects\n         */\n        transfers: Array<ITransfer>;\n        /**\n         * [,140 bytes в base58] string – additional info (optional field)\n         */\n        attachment?: string;\n    }\n\n    interface ITransfer {\n        /**\n         * address/alias\n         */\n        recipient: string;\n        /**\n         * amount\n         */\n        amount: number | string | TMoney;\n    }\n\n    type TMassTransferTxData = ISignData<11, IMassTransferTx>;\n\n    interface IDataTx extends ITransactionBase {\n        /**\n         * mass of objects\n         */\n        data: Array<TData>;\n    }\n\n    type TData = TCallArgs & {key: string};\n\n    type TDataTxData = ISignData<12, IDataTx>;\n\n    interface ISetScriptTx extends ITransactionBase {\n        /**\n         * script\n         * https://docs.wavesplatform.com/en/#section-5e6520b97a7ead921d7fb6bce7292ce0\n         */\n        script: string;\n    }\n\n    type TSetScriptTxData = ISignData<13, ISetScriptTx>;\n\n    interface ISponsoredFeeTx extends ITransactionBase {\n        /**\n         * MoneyLike – fee price in the asset\n         */\n        minSponsoredAssetFee: TMoney;\n    }\n\n    type TSponsoredFeeTxData = ISignData<14, ISponsoredFeeTx>;\n\n    interface ISetAssetScriptTx extends ITransactionBase {\n        /**\n         * asset ID\n         */\n        assetId: string;\n        /**\n         * script\n         * https://docs.wavesplatform.com/en/#section-5e6520b97a7ead921d7fb6bce7292ce0\n         */\n        script: string;\n    }\n\n    type TSetAssetScriptTxData = ISignData<15, ISetAssetScriptTx>;\n\n    interface IScriptInvocationTx extends ITransactionBase {\n        /**\n         * address script account\n         */\n        dApp: string;\n        /**\n         * array MoneyLike (at now can use only 1 payment)\n         */\n        payment?: Array<TMoney>;\n        call?: ICall;\n    }\n\n    interface ICall {\n        /**\n         * function name\n         */\n        function: string;\n        /**\n         * array\n         */\n        args: Array<TCallArgs>;\n    }\n\n    type TCallArgs = TCallArgsInteger | TCallArgsBoolean | TCallArgsBinary | TCallArgsString;\n\n    type TCallArgsInteger = {\n        type: 'integer';\n        value: number | string;\n    }\n\n    type TCallArgsBoolean = {\n        type: 'boolean';\n        value: boolean;\n    }\n\n    type TCallArgsBinary = {\n        type: 'binary';\n        /**\n         * base64\n         */\n        value: string;\n    }\n\n    type TCallArgsString = {\n        type: 'string';\n        value: string;\n    }\n\n    type TScriptInvocationTxData = ISignData<16, IScriptInvocationTx>;\n\n    type TSignTransactionPackageData = Array<\n        TIssueTxData |\n        TTransferTxData |\n        TReissueTxData |\n        TBurnTxData |\n        TCreateAliasTxData |\n        TMassTransferTxData |\n        TDataTxData>;\n\n    interface INotificationData {\n        /**\n         * string (20 chars max)\n         */\n        title: string;\n        /**\n         * string (250 chars max)\n         */\n        message?: string;\n    }\n\n    interface IMoneyTokens {\n        assetId: string;\n        tokens: number | string;\n    }\n\n    interface IMoneyCoins {\n        assetId: string;\n        coins: number | string;\n    }\n\n    interface IMoneyAmount {\n        assetId: string;\n        /**\n         * coins alias\n         */\n        amount: number | string;\n    }\n\n    type TMoney = IMoneyTokens | IMoneyCoins | IMoneyAmount;\n}\n\nconst expect = chai.expect\ninterface Console {\nmemory: any;\nassert(condition?: boolean, message?: string, ...data: any[]): void;\nclear(): void;\ncount(label?: string): void;\ndebug(message?: any, ...optionalParams: any[]): void;\ndir(value?: any, ...optionalParams: any[]): void;\ndirxml(value: any): void;\nerror(message?: any, ...optionalParams: any[]): void;\nexception(message?: string, ...optionalParams: any[]): void;\ngroup(groupTitle?: string, ...optionalParams: any[]): void;\ngroupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;\ngroupEnd(): void;\ninfo(message?: any, ...optionalParams: any[]): void;\nlog(message?: any, ...optionalParams: any[]): void;\nmarkTimeline(label?: string): void;\nprofile(reportName?: string): void;\nprofileEnd(reportName?: string): void;\ntable(...tabularData: any[]): void;\ntime(label?: string): void;\ntimeEnd(label?: string): void;\ntimeStamp(label?: string): void;\ntimeline(label?: string): void;\ntimelineEnd(label?: string): void;\ntrace(message?: any, ...optionalParams: any[]): void;\nwarn(message?: any, ...optionalParams: any[]): void;\n}\n\ndeclare var console: Console;\ndeclare function setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;\ndeclare function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;"